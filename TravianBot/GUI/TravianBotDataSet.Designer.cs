//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GUI {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("TravianBotDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TravianBotDataSet : System.Data.DataSet {
        
        private BuildingsDataTable tableBuildings;
        
        private PlayersDataTable tablePlayers;
        
        private PriorityDataTable tablePriority;
        
        private ProductionDataTable tableProduction;
        
        private ResourcesDataTable tableResources;
        
        private TaskListDataTable tableTaskList;
        
        private TasksDataTable tableTasks;
        
        private VillagesDataTable tableVillages;
        
        private GetProductionDataTable tableGetProduction;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TravianBotDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TravianBotDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Buildings"] != null)) {
                    base.Tables.Add(new BuildingsDataTable(ds.Tables["Buildings"]));
                }
                if ((ds.Tables["Players"] != null)) {
                    base.Tables.Add(new PlayersDataTable(ds.Tables["Players"]));
                }
                if ((ds.Tables["Priority"] != null)) {
                    base.Tables.Add(new PriorityDataTable(ds.Tables["Priority"]));
                }
                if ((ds.Tables["Production"] != null)) {
                    base.Tables.Add(new ProductionDataTable(ds.Tables["Production"]));
                }
                if ((ds.Tables["Resources"] != null)) {
                    base.Tables.Add(new ResourcesDataTable(ds.Tables["Resources"]));
                }
                if ((ds.Tables["TaskList"] != null)) {
                    base.Tables.Add(new TaskListDataTable(ds.Tables["TaskList"]));
                }
                if ((ds.Tables["Tasks"] != null)) {
                    base.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
                }
                if ((ds.Tables["Villages"] != null)) {
                    base.Tables.Add(new VillagesDataTable(ds.Tables["Villages"]));
                }
                if ((ds.Tables["GetProduction"] != null)) {
                    base.Tables.Add(new GetProductionDataTable(ds.Tables["GetProduction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuildingsDataTable Buildings {
            get {
                return this.tableBuildings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlayersDataTable Players {
            get {
                return this.tablePlayers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PriorityDataTable Priority {
            get {
                return this.tablePriority;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionDataTable Production {
            get {
                return this.tableProduction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResourcesDataTable Resources {
            get {
                return this.tableResources;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaskListDataTable TaskList {
            get {
                return this.tableTaskList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TasksDataTable Tasks {
            get {
                return this.tableTasks;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VillagesDataTable Villages {
            get {
                return this.tableVillages;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetProductionDataTable GetProduction {
            get {
                return this.tableGetProduction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            TravianBotDataSet cln = ((TravianBotDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Buildings"] != null)) {
                    base.Tables.Add(new BuildingsDataTable(ds.Tables["Buildings"]));
                }
                if ((ds.Tables["Players"] != null)) {
                    base.Tables.Add(new PlayersDataTable(ds.Tables["Players"]));
                }
                if ((ds.Tables["Priority"] != null)) {
                    base.Tables.Add(new PriorityDataTable(ds.Tables["Priority"]));
                }
                if ((ds.Tables["Production"] != null)) {
                    base.Tables.Add(new ProductionDataTable(ds.Tables["Production"]));
                }
                if ((ds.Tables["Resources"] != null)) {
                    base.Tables.Add(new ResourcesDataTable(ds.Tables["Resources"]));
                }
                if ((ds.Tables["TaskList"] != null)) {
                    base.Tables.Add(new TaskListDataTable(ds.Tables["TaskList"]));
                }
                if ((ds.Tables["Tasks"] != null)) {
                    base.Tables.Add(new TasksDataTable(ds.Tables["Tasks"]));
                }
                if ((ds.Tables["Villages"] != null)) {
                    base.Tables.Add(new VillagesDataTable(ds.Tables["Villages"]));
                }
                if ((ds.Tables["GetProduction"] != null)) {
                    base.Tables.Add(new GetProductionDataTable(ds.Tables["GetProduction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBuildings = ((BuildingsDataTable)(base.Tables["Buildings"]));
            if ((initTable == true)) {
                if ((this.tableBuildings != null)) {
                    this.tableBuildings.InitVars();
                }
            }
            this.tablePlayers = ((PlayersDataTable)(base.Tables["Players"]));
            if ((initTable == true)) {
                if ((this.tablePlayers != null)) {
                    this.tablePlayers.InitVars();
                }
            }
            this.tablePriority = ((PriorityDataTable)(base.Tables["Priority"]));
            if ((initTable == true)) {
                if ((this.tablePriority != null)) {
                    this.tablePriority.InitVars();
                }
            }
            this.tableProduction = ((ProductionDataTable)(base.Tables["Production"]));
            if ((initTable == true)) {
                if ((this.tableProduction != null)) {
                    this.tableProduction.InitVars();
                }
            }
            this.tableResources = ((ResourcesDataTable)(base.Tables["Resources"]));
            if ((initTable == true)) {
                if ((this.tableResources != null)) {
                    this.tableResources.InitVars();
                }
            }
            this.tableTaskList = ((TaskListDataTable)(base.Tables["TaskList"]));
            if ((initTable == true)) {
                if ((this.tableTaskList != null)) {
                    this.tableTaskList.InitVars();
                }
            }
            this.tableTasks = ((TasksDataTable)(base.Tables["Tasks"]));
            if ((initTable == true)) {
                if ((this.tableTasks != null)) {
                    this.tableTasks.InitVars();
                }
            }
            this.tableVillages = ((VillagesDataTable)(base.Tables["Villages"]));
            if ((initTable == true)) {
                if ((this.tableVillages != null)) {
                    this.tableVillages.InitVars();
                }
            }
            this.tableGetProduction = ((GetProductionDataTable)(base.Tables["GetProduction"]));
            if ((initTable == true)) {
                if ((this.tableGetProduction != null)) {
                    this.tableGetProduction.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TravianBotDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TravianBotDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBuildings = new BuildingsDataTable();
            base.Tables.Add(this.tableBuildings);
            this.tablePlayers = new PlayersDataTable();
            base.Tables.Add(this.tablePlayers);
            this.tablePriority = new PriorityDataTable();
            base.Tables.Add(this.tablePriority);
            this.tableProduction = new ProductionDataTable();
            base.Tables.Add(this.tableProduction);
            this.tableResources = new ResourcesDataTable();
            base.Tables.Add(this.tableResources);
            this.tableTaskList = new TaskListDataTable();
            base.Tables.Add(this.tableTaskList);
            this.tableTasks = new TasksDataTable();
            base.Tables.Add(this.tableTasks);
            this.tableVillages = new VillagesDataTable();
            base.Tables.Add(this.tableVillages);
            this.tableGetProduction = new GetProductionDataTable();
            base.Tables.Add(this.tableGetProduction);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBuildings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlayers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePriority() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResources() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaskList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTasks() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVillages() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetProduction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            TravianBotDataSet ds = new TravianBotDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BuildingsRowChangeEventHandler(object sender, BuildingsRowChangeEvent e);
        
        public delegate void PlayersRowChangeEventHandler(object sender, PlayersRowChangeEvent e);
        
        public delegate void PriorityRowChangeEventHandler(object sender, PriorityRowChangeEvent e);
        
        public delegate void ProductionRowChangeEventHandler(object sender, ProductionRowChangeEvent e);
        
        public delegate void ResourcesRowChangeEventHandler(object sender, ResourcesRowChangeEvent e);
        
        public delegate void TaskListRowChangeEventHandler(object sender, TaskListRowChangeEvent e);
        
        public delegate void TasksRowChangeEventHandler(object sender, TasksRowChangeEvent e);
        
        public delegate void VillagesRowChangeEventHandler(object sender, VillagesRowChangeEvent e);
        
        public delegate void GetProductionRowChangeEventHandler(object sender, GetProductionRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BuildingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnBuildingFullName;
            
            private System.Data.DataColumn columnBuildingId;
            
            private System.Data.DataColumn columnBuildingName;
            
            private System.Data.DataColumn columnBuildingLevel;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsDataTable() {
                this.TableName = "Buildings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuildingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BuildingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingFullNameColumn {
                get {
                    return this.columnBuildingFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingIdColumn {
                get {
                    return this.columnBuildingId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingNameColumn {
                get {
                    return this.columnBuildingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildingLevelColumn {
                get {
                    return this.columnBuildingLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsRow this[int index] {
                get {
                    return ((BuildingsRow)(this.Rows[index]));
                }
            }
            
            public event BuildingsRowChangeEventHandler BuildingsRowChanging;
            
            public event BuildingsRowChangeEventHandler BuildingsRowChanged;
            
            public event BuildingsRowChangeEventHandler BuildingsRowDeleting;
            
            public event BuildingsRowChangeEventHandler BuildingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBuildingsRow(BuildingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsRow AddBuildingsRow(int VillageId, string BuildingFullName, int BuildingId, string BuildingName, int BuildingLevel, int PlayerId) {
                BuildingsRow rowBuildingsRow = ((BuildingsRow)(this.NewRow()));
                rowBuildingsRow.ItemArray = new object[] {
                        null,
                        VillageId,
                        BuildingFullName,
                        BuildingId,
                        BuildingName,
                        BuildingLevel,
                        PlayerId};
                this.Rows.Add(rowBuildingsRow);
                return rowBuildingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BuildingsDataTable cln = ((BuildingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BuildingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnBuildingFullName = base.Columns["BuildingFullName"];
                this.columnBuildingId = base.Columns["BuildingId"];
                this.columnBuildingName = base.Columns["BuildingName"];
                this.columnBuildingLevel = base.Columns["BuildingLevel"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnBuildingFullName = new System.Data.DataColumn("BuildingFullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingFullName);
                this.columnBuildingId = new System.Data.DataColumn("BuildingId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingId);
                this.columnBuildingName = new System.Data.DataColumn("BuildingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingName);
                this.columnBuildingLevel = new System.Data.DataColumn("BuildingLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingLevel);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageId.AllowDBNull = false;
                this.columnBuildingFullName.AllowDBNull = false;
                this.columnBuildingFullName.MaxLength = 50;
                this.columnBuildingId.AllowDBNull = false;
                this.columnBuildingName.AllowDBNull = false;
                this.columnBuildingName.MaxLength = 50;
                this.columnBuildingLevel.AllowDBNull = false;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsRow NewBuildingsRow() {
                return ((BuildingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BuildingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BuildingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuildingsRowChanged != null)) {
                    this.BuildingsRowChanged(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuildingsRowChanging != null)) {
                    this.BuildingsRowChanging(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuildingsRowDeleted != null)) {
                    this.BuildingsRowDeleted(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuildingsRowDeleting != null)) {
                    this.BuildingsRowDeleting(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBuildingsRow(BuildingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BuildingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlayersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnPlayerId;
            
            private System.Data.DataColumn columnPlayerName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersDataTable() {
                this.TableName = "Players";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlayersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlayersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerNameColumn {
                get {
                    return this.columnPlayerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersRow this[int index] {
                get {
                    return ((PlayersRow)(this.Rows[index]));
                }
            }
            
            public event PlayersRowChangeEventHandler PlayersRowChanging;
            
            public event PlayersRowChangeEventHandler PlayersRowChanged;
            
            public event PlayersRowChangeEventHandler PlayersRowDeleting;
            
            public event PlayersRowChangeEventHandler PlayersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlayersRow(PlayersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersRow AddPlayersRow(int PlayerId, string PlayerName) {
                PlayersRow rowPlayersRow = ((PlayersRow)(this.NewRow()));
                rowPlayersRow.ItemArray = new object[] {
                        null,
                        PlayerId,
                        PlayerName};
                this.Rows.Add(rowPlayersRow);
                return rowPlayersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PlayersDataTable cln = ((PlayersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PlayersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPlayerId = base.Columns["PlayerId"];
                this.columnPlayerName = base.Columns["PlayerName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnPlayerName = new System.Data.DataColumn("PlayerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnPlayerId.AllowDBNull = false;
                this.columnPlayerName.AllowDBNull = false;
                this.columnPlayerName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersRow NewPlayersRow() {
                return ((PlayersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PlayersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PlayersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlayersRowChanged != null)) {
                    this.PlayersRowChanged(this, new PlayersRowChangeEvent(((PlayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlayersRowChanging != null)) {
                    this.PlayersRowChanging(this, new PlayersRowChangeEvent(((PlayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlayersRowDeleted != null)) {
                    this.PlayersRowDeleted(this, new PlayersRowChangeEvent(((PlayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlayersRowDeleting != null)) {
                    this.PlayersRowDeleting(this, new PlayersRowChangeEvent(((PlayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlayersRow(PlayersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlayersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PriorityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnPriorityName;
            
            private System.Data.DataColumn columnPriorityLevel;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityDataTable() {
                this.TableName = "Priority";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriorityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PriorityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityNameColumn {
                get {
                    return this.columnPriorityName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityLevelColumn {
                get {
                    return this.columnPriorityLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityRow this[int index] {
                get {
                    return ((PriorityRow)(this.Rows[index]));
                }
            }
            
            public event PriorityRowChangeEventHandler PriorityRowChanging;
            
            public event PriorityRowChangeEventHandler PriorityRowChanged;
            
            public event PriorityRowChangeEventHandler PriorityRowDeleting;
            
            public event PriorityRowChangeEventHandler PriorityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPriorityRow(PriorityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityRow AddPriorityRow(string PriorityName, int PriorityLevel) {
                PriorityRow rowPriorityRow = ((PriorityRow)(this.NewRow()));
                rowPriorityRow.ItemArray = new object[] {
                        null,
                        PriorityName,
                        PriorityLevel};
                this.Rows.Add(rowPriorityRow);
                return rowPriorityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PriorityDataTable cln = ((PriorityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PriorityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPriorityName = base.Columns["PriorityName"];
                this.columnPriorityLevel = base.Columns["PriorityLevel"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPriorityName = new System.Data.DataColumn("PriorityName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityName);
                this.columnPriorityLevel = new System.Data.DataColumn("PriorityLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityLevel);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnPriorityName.AllowDBNull = false;
                this.columnPriorityName.MaxLength = 50;
                this.columnPriorityLevel.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityRow NewPriorityRow() {
                return ((PriorityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PriorityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PriorityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PriorityRowChanged != null)) {
                    this.PriorityRowChanged(this, new PriorityRowChangeEvent(((PriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PriorityRowChanging != null)) {
                    this.PriorityRowChanging(this, new PriorityRowChangeEvent(((PriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PriorityRowDeleted != null)) {
                    this.PriorityRowDeleted(this, new PriorityRowChangeEvent(((PriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PriorityRowDeleting != null)) {
                    this.PriorityRowDeleting(this, new PriorityRowChangeEvent(((PriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePriorityRow(PriorityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PriorityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnWarehouse;
            
            private System.Data.DataColumn columnGranary;
            
            private System.Data.DataColumn columnWood;
            
            private System.Data.DataColumn columnClay;
            
            private System.Data.DataColumn columnIron;
            
            private System.Data.DataColumn columnCrop;
            
            private System.Data.DataColumn columnWoodPerHour;
            
            private System.Data.DataColumn columnClayPerHour;
            
            private System.Data.DataColumn columnIronPerHour;
            
            private System.Data.DataColumn columnCropPerHour;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionDataTable() {
                this.TableName = "Production";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GranaryColumn {
                get {
                    return this.columnGranary;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodColumn {
                get {
                    return this.columnWood;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayColumn {
                get {
                    return this.columnClay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronColumn {
                get {
                    return this.columnIron;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropColumn {
                get {
                    return this.columnCrop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodPerHourColumn {
                get {
                    return this.columnWoodPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayPerHourColumn {
                get {
                    return this.columnClayPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronPerHourColumn {
                get {
                    return this.columnIronPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropPerHourColumn {
                get {
                    return this.columnCropPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionRow this[int index] {
                get {
                    return ((ProductionRow)(this.Rows[index]));
                }
            }
            
            public event ProductionRowChangeEventHandler ProductionRowChanging;
            
            public event ProductionRowChangeEventHandler ProductionRowChanged;
            
            public event ProductionRowChangeEventHandler ProductionRowDeleting;
            
            public event ProductionRowChangeEventHandler ProductionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionRow(ProductionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionRow AddProductionRow(int VillageId, int Warehouse, int Granary, int Wood, int Clay, int Iron, int Crop, int WoodPerHour, int ClayPerHour, int IronPerHour, int CropPerHour, int PlayerId) {
                ProductionRow rowProductionRow = ((ProductionRow)(this.NewRow()));
                rowProductionRow.ItemArray = new object[] {
                        null,
                        VillageId,
                        Warehouse,
                        Granary,
                        Wood,
                        Clay,
                        Iron,
                        Crop,
                        WoodPerHour,
                        ClayPerHour,
                        IronPerHour,
                        CropPerHour,
                        PlayerId};
                this.Rows.Add(rowProductionRow);
                return rowProductionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionDataTable cln = ((ProductionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnGranary = base.Columns["Granary"];
                this.columnWood = base.Columns["Wood"];
                this.columnClay = base.Columns["Clay"];
                this.columnIron = base.Columns["Iron"];
                this.columnCrop = base.Columns["Crop"];
                this.columnWoodPerHour = base.Columns["WoodPerHour"];
                this.columnClayPerHour = base.Columns["ClayPerHour"];
                this.columnIronPerHour = base.Columns["IronPerHour"];
                this.columnCropPerHour = base.Columns["CropPerHour"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnWarehouse = new System.Data.DataColumn("Warehouse", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnGranary = new System.Data.DataColumn("Granary", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranary);
                this.columnWood = new System.Data.DataColumn("Wood", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWood);
                this.columnClay = new System.Data.DataColumn("Clay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClay);
                this.columnIron = new System.Data.DataColumn("Iron", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIron);
                this.columnCrop = new System.Data.DataColumn("Crop", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrop);
                this.columnWoodPerHour = new System.Data.DataColumn("WoodPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWoodPerHour);
                this.columnClayPerHour = new System.Data.DataColumn("ClayPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClayPerHour);
                this.columnIronPerHour = new System.Data.DataColumn("IronPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIronPerHour);
                this.columnCropPerHour = new System.Data.DataColumn("CropPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropPerHour);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageId.AllowDBNull = false;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionRow NewProductionRow() {
                return ((ProductionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionRowChanged != null)) {
                    this.ProductionRowChanged(this, new ProductionRowChangeEvent(((ProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionRowChanging != null)) {
                    this.ProductionRowChanging(this, new ProductionRowChangeEvent(((ProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionRowDeleted != null)) {
                    this.ProductionRowDeleted(this, new ProductionRowChangeEvent(((ProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionRowDeleting != null)) {
                    this.ProductionRowDeleting(this, new ProductionRowChangeEvent(((ProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionRow(ProductionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResourcesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnResourcesFullName;
            
            private System.Data.DataColumn columnResourcesId;
            
            private System.Data.DataColumn columnResourcesName;
            
            private System.Data.DataColumn columnResourcesLevel;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesDataTable() {
                this.TableName = "Resources";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourcesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResourcesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResourcesFullNameColumn {
                get {
                    return this.columnResourcesFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResourcesIdColumn {
                get {
                    return this.columnResourcesId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResourcesNameColumn {
                get {
                    return this.columnResourcesName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResourcesLevelColumn {
                get {
                    return this.columnResourcesLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow this[int index] {
                get {
                    return ((ResourcesRow)(this.Rows[index]));
                }
            }
            
            public event ResourcesRowChangeEventHandler ResourcesRowChanging;
            
            public event ResourcesRowChangeEventHandler ResourcesRowChanged;
            
            public event ResourcesRowChangeEventHandler ResourcesRowDeleting;
            
            public event ResourcesRowChangeEventHandler ResourcesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResourcesRow(ResourcesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow AddResourcesRow(int VillageId, string ResourcesFullName, int ResourcesId, string ResourcesName, int ResourcesLevel, int PlayerId) {
                ResourcesRow rowResourcesRow = ((ResourcesRow)(this.NewRow()));
                rowResourcesRow.ItemArray = new object[] {
                        null,
                        VillageId,
                        ResourcesFullName,
                        ResourcesId,
                        ResourcesName,
                        ResourcesLevel,
                        PlayerId};
                this.Rows.Add(rowResourcesRow);
                return rowResourcesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResourcesDataTable cln = ((ResourcesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResourcesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnResourcesFullName = base.Columns["ResourcesFullName"];
                this.columnResourcesId = base.Columns["ResourcesId"];
                this.columnResourcesName = base.Columns["ResourcesName"];
                this.columnResourcesLevel = base.Columns["ResourcesLevel"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnResourcesFullName = new System.Data.DataColumn("ResourcesFullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesFullName);
                this.columnResourcesId = new System.Data.DataColumn("ResourcesId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesId);
                this.columnResourcesName = new System.Data.DataColumn("ResourcesName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesName);
                this.columnResourcesLevel = new System.Data.DataColumn("ResourcesLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourcesLevel);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageId.AllowDBNull = false;
                this.columnResourcesFullName.AllowDBNull = false;
                this.columnResourcesFullName.MaxLength = 50;
                this.columnResourcesId.AllowDBNull = false;
                this.columnResourcesName.AllowDBNull = false;
                this.columnResourcesName.MaxLength = 50;
                this.columnResourcesLevel.AllowDBNull = false;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow NewResourcesRow() {
                return ((ResourcesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResourcesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResourcesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResourcesRowChanged != null)) {
                    this.ResourcesRowChanged(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResourcesRowChanging != null)) {
                    this.ResourcesRowChanging(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResourcesRowDeleted != null)) {
                    this.ResourcesRowDeleted(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResourcesRowDeleting != null)) {
                    this.ResourcesRowDeleting(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResourcesRow(ResourcesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResourcesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaskListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTaskId;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnBuildId;
            
            private System.Data.DataColumn columnPriorityId;
            
            private System.Data.DataColumn columnBuildLevel;
            
            private System.Data.DataColumn columnNextCheck;
            
            private System.Data.DataColumn columnEnabled;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListDataTable() {
                this.TableName = "TaskList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaskListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaskListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaskIdColumn {
                get {
                    return this.columnTaskId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildIdColumn {
                get {
                    return this.columnBuildId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityIdColumn {
                get {
                    return this.columnPriorityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildLevelColumn {
                get {
                    return this.columnBuildLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextCheckColumn {
                get {
                    return this.columnNextCheck;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnabledColumn {
                get {
                    return this.columnEnabled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListRow this[int index] {
                get {
                    return ((TaskListRow)(this.Rows[index]));
                }
            }
            
            public event TaskListRowChangeEventHandler TaskListRowChanging;
            
            public event TaskListRowChangeEventHandler TaskListRowChanged;
            
            public event TaskListRowChangeEventHandler TaskListRowDeleting;
            
            public event TaskListRowChangeEventHandler TaskListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaskListRow(TaskListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListRow AddTaskListRow(int TaskId, int VillageId, int BuildId, int PriorityId, int BuildLevel, System.DateTime NextCheck, int Enabled, int PlayerId) {
                TaskListRow rowTaskListRow = ((TaskListRow)(this.NewRow()));
                rowTaskListRow.ItemArray = new object[] {
                        null,
                        TaskId,
                        VillageId,
                        BuildId,
                        PriorityId,
                        BuildLevel,
                        NextCheck,
                        Enabled,
                        PlayerId};
                this.Rows.Add(rowTaskListRow);
                return rowTaskListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TaskListDataTable cln = ((TaskListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TaskListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTaskId = base.Columns["TaskId"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnBuildId = base.Columns["BuildId"];
                this.columnPriorityId = base.Columns["PriorityId"];
                this.columnBuildLevel = base.Columns["BuildLevel"];
                this.columnNextCheck = base.Columns["NextCheck"];
                this.columnEnabled = base.Columns["Enabled"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTaskId = new System.Data.DataColumn("TaskId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskId);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnBuildId = new System.Data.DataColumn("BuildId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildId);
                this.columnPriorityId = new System.Data.DataColumn("PriorityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityId);
                this.columnBuildLevel = new System.Data.DataColumn("BuildLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildLevel);
                this.columnNextCheck = new System.Data.DataColumn("NextCheck", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextCheck);
                this.columnEnabled = new System.Data.DataColumn("Enabled", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabled);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnTaskId.AllowDBNull = false;
                this.columnVillageId.AllowDBNull = false;
                this.columnBuildId.AllowDBNull = false;
                this.columnPriorityId.AllowDBNull = false;
                this.columnBuildLevel.AllowDBNull = false;
                this.columnNextCheck.AllowDBNull = false;
                this.columnEnabled.AllowDBNull = false;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListRow NewTaskListRow() {
                return ((TaskListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TaskListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TaskListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaskListRowChanged != null)) {
                    this.TaskListRowChanged(this, new TaskListRowChangeEvent(((TaskListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaskListRowChanging != null)) {
                    this.TaskListRowChanging(this, new TaskListRowChangeEvent(((TaskListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaskListRowDeleted != null)) {
                    this.TaskListRowDeleted(this, new TaskListRowChangeEvent(((TaskListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaskListRowDeleting != null)) {
                    this.TaskListRowDeleting(this, new TaskListRowChangeEvent(((TaskListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaskListRow(TaskListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaskListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TasksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTaskName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksDataTable() {
                this.TableName = "Tasks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TasksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TasksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaskNameColumn {
                get {
                    return this.columnTaskName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksRow this[int index] {
                get {
                    return ((TasksRow)(this.Rows[index]));
                }
            }
            
            public event TasksRowChangeEventHandler TasksRowChanging;
            
            public event TasksRowChangeEventHandler TasksRowChanged;
            
            public event TasksRowChangeEventHandler TasksRowDeleting;
            
            public event TasksRowChangeEventHandler TasksRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTasksRow(TasksRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksRow AddTasksRow(string TaskName) {
                TasksRow rowTasksRow = ((TasksRow)(this.NewRow()));
                rowTasksRow.ItemArray = new object[] {
                        null,
                        TaskName};
                this.Rows.Add(rowTasksRow);
                return rowTasksRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TasksDataTable cln = ((TasksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TasksDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTaskName = base.Columns["TaskName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTaskName = new System.Data.DataColumn("TaskName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnTaskName.AllowDBNull = false;
                this.columnTaskName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksRow NewTasksRow() {
                return ((TasksRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TasksRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TasksRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TasksRowChanged != null)) {
                    this.TasksRowChanged(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TasksRowChanging != null)) {
                    this.TasksRowChanging(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TasksRowDeleted != null)) {
                    this.TasksRowDeleted(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TasksRowDeleting != null)) {
                    this.TasksRowDeleting(this, new TasksRowChangeEvent(((TasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTasksRow(TasksRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TasksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VillagesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnVillageName;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesDataTable() {
                this.TableName = "Villages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VillagesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VillagesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageNameColumn {
                get {
                    return this.columnVillageName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesRow this[int index] {
                get {
                    return ((VillagesRow)(this.Rows[index]));
                }
            }
            
            public event VillagesRowChangeEventHandler VillagesRowChanging;
            
            public event VillagesRowChangeEventHandler VillagesRowChanged;
            
            public event VillagesRowChangeEventHandler VillagesRowDeleting;
            
            public event VillagesRowChangeEventHandler VillagesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVillagesRow(VillagesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesRow AddVillagesRow(int VillageId, string VillageName, int PlayerId) {
                VillagesRow rowVillagesRow = ((VillagesRow)(this.NewRow()));
                rowVillagesRow.ItemArray = new object[] {
                        null,
                        VillageId,
                        VillageName,
                        PlayerId};
                this.Rows.Add(rowVillagesRow);
                return rowVillagesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VillagesDataTable cln = ((VillagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VillagesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnVillageName = base.Columns["VillageName"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnVillageName = new System.Data.DataColumn("VillageName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageName);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageId.AllowDBNull = false;
                this.columnVillageName.AllowDBNull = false;
                this.columnVillageName.MaxLength = 50;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesRow NewVillagesRow() {
                return ((VillagesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VillagesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VillagesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VillagesRowChanged != null)) {
                    this.VillagesRowChanged(this, new VillagesRowChangeEvent(((VillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VillagesRowChanging != null)) {
                    this.VillagesRowChanging(this, new VillagesRowChangeEvent(((VillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VillagesRowDeleted != null)) {
                    this.VillagesRowDeleted(this, new VillagesRowChangeEvent(((VillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VillagesRowDeleting != null)) {
                    this.VillagesRowDeleting(this, new VillagesRowChangeEvent(((VillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVillagesRow(VillagesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VillagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetProductionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageName;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnWarehouse;
            
            private System.Data.DataColumn columnGranary;
            
            private System.Data.DataColumn columnWood;
            
            private System.Data.DataColumn columnClay;
            
            private System.Data.DataColumn columnIron;
            
            private System.Data.DataColumn columnCrop;
            
            private System.Data.DataColumn columnWoodPerHour;
            
            private System.Data.DataColumn columnClayPerHour;
            
            private System.Data.DataColumn columnIronPerHour;
            
            private System.Data.DataColumn columnCropPerHour;
            
            private System.Data.DataColumn columnPlayerName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionDataTable() {
                this.TableName = "GetProduction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetProductionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetProductionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageNameColumn {
                get {
                    return this.columnVillageName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GranaryColumn {
                get {
                    return this.columnGranary;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodColumn {
                get {
                    return this.columnWood;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayColumn {
                get {
                    return this.columnClay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronColumn {
                get {
                    return this.columnIron;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropColumn {
                get {
                    return this.columnCrop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodPerHourColumn {
                get {
                    return this.columnWoodPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayPerHourColumn {
                get {
                    return this.columnClayPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronPerHourColumn {
                get {
                    return this.columnIronPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropPerHourColumn {
                get {
                    return this.columnCropPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerNameColumn {
                get {
                    return this.columnPlayerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow this[int index] {
                get {
                    return ((GetProductionRow)(this.Rows[index]));
                }
            }
            
            public event GetProductionRowChangeEventHandler GetProductionRowChanging;
            
            public event GetProductionRowChangeEventHandler GetProductionRowChanged;
            
            public event GetProductionRowChangeEventHandler GetProductionRowDeleting;
            
            public event GetProductionRowChangeEventHandler GetProductionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetProductionRow(GetProductionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow AddGetProductionRow(string VillageName, int VillageId, int Warehouse, int Granary, int Wood, int Clay, int Iron, int Crop, int WoodPerHour, int ClayPerHour, int IronPerHour, int CropPerHour, string PlayerName) {
                GetProductionRow rowGetProductionRow = ((GetProductionRow)(this.NewRow()));
                rowGetProductionRow.ItemArray = new object[] {
                        null,
                        VillageName,
                        VillageId,
                        Warehouse,
                        Granary,
                        Wood,
                        Clay,
                        Iron,
                        Crop,
                        WoodPerHour,
                        ClayPerHour,
                        IronPerHour,
                        CropPerHour,
                        PlayerName};
                this.Rows.Add(rowGetProductionRow);
                return rowGetProductionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetProductionDataTable cln = ((GetProductionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetProductionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageName = base.Columns["VillageName"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnGranary = base.Columns["Granary"];
                this.columnWood = base.Columns["Wood"];
                this.columnClay = base.Columns["Clay"];
                this.columnIron = base.Columns["Iron"];
                this.columnCrop = base.Columns["Crop"];
                this.columnWoodPerHour = base.Columns["WoodPerHour"];
                this.columnClayPerHour = base.Columns["ClayPerHour"];
                this.columnIronPerHour = base.Columns["IronPerHour"];
                this.columnCropPerHour = base.Columns["CropPerHour"];
                this.columnPlayerName = base.Columns["PlayerName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageName = new System.Data.DataColumn("VillageName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageName);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnWarehouse = new System.Data.DataColumn("Warehouse", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnGranary = new System.Data.DataColumn("Granary", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranary);
                this.columnWood = new System.Data.DataColumn("Wood", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWood);
                this.columnClay = new System.Data.DataColumn("Clay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClay);
                this.columnIron = new System.Data.DataColumn("Iron", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIron);
                this.columnCrop = new System.Data.DataColumn("Crop", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrop);
                this.columnWoodPerHour = new System.Data.DataColumn("WoodPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWoodPerHour);
                this.columnClayPerHour = new System.Data.DataColumn("ClayPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClayPerHour);
                this.columnIronPerHour = new System.Data.DataColumn("IronPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIronPerHour);
                this.columnCropPerHour = new System.Data.DataColumn("CropPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropPerHour);
                this.columnPlayerName = new System.Data.DataColumn("PlayerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageName.ReadOnly = true;
                this.columnVillageName.MaxLength = 50;
                this.columnVillageId.ReadOnly = true;
                this.columnPlayerName.ReadOnly = true;
                this.columnPlayerName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow NewGetProductionRow() {
                return ((GetProductionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetProductionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetProductionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetProductionRowChanged != null)) {
                    this.GetProductionRowChanged(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetProductionRowChanging != null)) {
                    this.GetProductionRowChanging(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetProductionRowDeleted != null)) {
                    this.GetProductionRowDeleted(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetProductionRowDeleting != null)) {
                    this.GetProductionRowDeleting(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetProductionRow(GetProductionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetProductionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BuildingsRow : System.Data.DataRow {
            
            private BuildingsDataTable tableBuildings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuildingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuildings = ((BuildingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableBuildings.IDColumn]));
                }
                set {
                    this[this.tableBuildings.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableBuildings.VillageIdColumn]));
                }
                set {
                    this[this.tableBuildings.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingFullName {
                get {
                    return ((string)(this[this.tableBuildings.BuildingFullNameColumn]));
                }
                set {
                    this[this.tableBuildings.BuildingFullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildingId {
                get {
                    return ((int)(this[this.tableBuildings.BuildingIdColumn]));
                }
                set {
                    this[this.tableBuildings.BuildingIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingName {
                get {
                    return ((string)(this[this.tableBuildings.BuildingNameColumn]));
                }
                set {
                    this[this.tableBuildings.BuildingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildingLevel {
                get {
                    return ((int)(this[this.tableBuildings.BuildingLevelColumn]));
                }
                set {
                    this[this.tableBuildings.BuildingLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableBuildings.PlayerIdColumn]));
                }
                set {
                    this[this.tableBuildings.PlayerIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlayersRow : System.Data.DataRow {
            
            private PlayersDataTable tablePlayers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlayersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlayers = ((PlayersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePlayers.IDColumn]));
                }
                set {
                    this[this.tablePlayers.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tablePlayers.PlayerIdColumn]));
                }
                set {
                    this[this.tablePlayers.PlayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlayerName {
                get {
                    return ((string)(this[this.tablePlayers.PlayerNameColumn]));
                }
                set {
                    this[this.tablePlayers.PlayerNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PriorityRow : System.Data.DataRow {
            
            private PriorityDataTable tablePriority;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriorityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePriority = ((PriorityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePriority.IDColumn]));
                }
                set {
                    this[this.tablePriority.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PriorityName {
                get {
                    return ((string)(this[this.tablePriority.PriorityNameColumn]));
                }
                set {
                    this[this.tablePriority.PriorityNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriorityLevel {
                get {
                    return ((int)(this[this.tablePriority.PriorityLevelColumn]));
                }
                set {
                    this[this.tablePriority.PriorityLevelColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionRow : System.Data.DataRow {
            
            private ProductionDataTable tableProduction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduction = ((ProductionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProduction.IDColumn]));
                }
                set {
                    this[this.tableProduction.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableProduction.VillageIdColumn]));
                }
                set {
                    this[this.tableProduction.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Warehouse {
                get {
                    try {
                        return ((int)(this[this.tableProduction.WarehouseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Warehouse\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.WarehouseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Granary {
                get {
                    try {
                        return ((int)(this[this.tableProduction.GranaryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Granary\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.GranaryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Wood {
                get {
                    try {
                        return ((int)(this[this.tableProduction.WoodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Wood\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.WoodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Clay {
                get {
                    try {
                        return ((int)(this[this.tableProduction.ClayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Clay\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.ClayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Iron {
                get {
                    try {
                        return ((int)(this[this.tableProduction.IronColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Iron\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.IronColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Crop {
                get {
                    try {
                        return ((int)(this[this.tableProduction.CropColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Crop\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.CropColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WoodPerHour {
                get {
                    try {
                        return ((int)(this[this.tableProduction.WoodPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WoodPerHour\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.WoodPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClayPerHour {
                get {
                    try {
                        return ((int)(this[this.tableProduction.ClayPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClayPerHour\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.ClayPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IronPerHour {
                get {
                    try {
                        return ((int)(this[this.tableProduction.IronPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IronPerHour\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.IronPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropPerHour {
                get {
                    try {
                        return ((int)(this[this.tableProduction.CropPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CropPerHour\' in table \'Production\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduction.CropPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableProduction.PlayerIdColumn]));
                }
                set {
                    this[this.tableProduction.PlayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableProduction.WarehouseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableProduction.WarehouseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranaryNull() {
                return this.IsNull(this.tableProduction.GranaryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranaryNull() {
                this[this.tableProduction.GranaryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodNull() {
                return this.IsNull(this.tableProduction.WoodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodNull() {
                this[this.tableProduction.WoodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayNull() {
                return this.IsNull(this.tableProduction.ClayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayNull() {
                this[this.tableProduction.ClayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronNull() {
                return this.IsNull(this.tableProduction.IronColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronNull() {
                this[this.tableProduction.IronColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropNull() {
                return this.IsNull(this.tableProduction.CropColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropNull() {
                this[this.tableProduction.CropColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodPerHourNull() {
                return this.IsNull(this.tableProduction.WoodPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodPerHourNull() {
                this[this.tableProduction.WoodPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayPerHourNull() {
                return this.IsNull(this.tableProduction.ClayPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayPerHourNull() {
                this[this.tableProduction.ClayPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronPerHourNull() {
                return this.IsNull(this.tableProduction.IronPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronPerHourNull() {
                this[this.tableProduction.IronPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropPerHourNull() {
                return this.IsNull(this.tableProduction.CropPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropPerHourNull() {
                this[this.tableProduction.CropPerHourColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResourcesRow : System.Data.DataRow {
            
            private ResourcesDataTable tableResources;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourcesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResources = ((ResourcesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableResources.IDColumn]));
                }
                set {
                    this[this.tableResources.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableResources.VillageIdColumn]));
                }
                set {
                    this[this.tableResources.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourcesFullName {
                get {
                    return ((string)(this[this.tableResources.ResourcesFullNameColumn]));
                }
                set {
                    this[this.tableResources.ResourcesFullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResourcesId {
                get {
                    return ((int)(this[this.tableResources.ResourcesIdColumn]));
                }
                set {
                    this[this.tableResources.ResourcesIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourcesName {
                get {
                    return ((string)(this[this.tableResources.ResourcesNameColumn]));
                }
                set {
                    this[this.tableResources.ResourcesNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResourcesLevel {
                get {
                    return ((int)(this[this.tableResources.ResourcesLevelColumn]));
                }
                set {
                    this[this.tableResources.ResourcesLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableResources.PlayerIdColumn]));
                }
                set {
                    this[this.tableResources.PlayerIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaskListRow : System.Data.DataRow {
            
            private TaskListDataTable tableTaskList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaskListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaskList = ((TaskListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTaskList.IDColumn]));
                }
                set {
                    this[this.tableTaskList.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaskId {
                get {
                    return ((int)(this[this.tableTaskList.TaskIdColumn]));
                }
                set {
                    this[this.tableTaskList.TaskIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableTaskList.VillageIdColumn]));
                }
                set {
                    this[this.tableTaskList.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildId {
                get {
                    return ((int)(this[this.tableTaskList.BuildIdColumn]));
                }
                set {
                    this[this.tableTaskList.BuildIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriorityId {
                get {
                    return ((int)(this[this.tableTaskList.PriorityIdColumn]));
                }
                set {
                    this[this.tableTaskList.PriorityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildLevel {
                get {
                    return ((int)(this[this.tableTaskList.BuildLevelColumn]));
                }
                set {
                    this[this.tableTaskList.BuildLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextCheck {
                get {
                    return ((System.DateTime)(this[this.tableTaskList.NextCheckColumn]));
                }
                set {
                    this[this.tableTaskList.NextCheckColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Enabled {
                get {
                    return ((int)(this[this.tableTaskList.EnabledColumn]));
                }
                set {
                    this[this.tableTaskList.EnabledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableTaskList.PlayerIdColumn]));
                }
                set {
                    this[this.tableTaskList.PlayerIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TasksRow : System.Data.DataRow {
            
            private TasksDataTable tableTasks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TasksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTasks = ((TasksDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTasks.IDColumn]));
                }
                set {
                    this[this.tableTasks.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaskName {
                get {
                    return ((string)(this[this.tableTasks.TaskNameColumn]));
                }
                set {
                    this[this.tableTasks.TaskNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VillagesRow : System.Data.DataRow {
            
            private VillagesDataTable tableVillages;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VillagesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVillages = ((VillagesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableVillages.IDColumn]));
                }
                set {
                    this[this.tableVillages.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableVillages.VillageIdColumn]));
                }
                set {
                    this[this.tableVillages.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VillageName {
                get {
                    return ((string)(this[this.tableVillages.VillageNameColumn]));
                }
                set {
                    this[this.tableVillages.VillageNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableVillages.PlayerIdColumn]));
                }
                set {
                    this[this.tableVillages.PlayerIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetProductionRow : System.Data.DataRow {
            
            private GetProductionDataTable tableGetProduction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetProductionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetProduction = ((GetProductionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetProduction.IDColumn]));
                }
                set {
                    this[this.tableGetProduction.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VillageName {
                get {
                    try {
                        return ((string)(this[this.tableGetProduction.VillageNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VillageName\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.VillageNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.VillageIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VillageId\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Warehouse {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WarehouseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Warehouse\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WarehouseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Granary {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.GranaryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Granary\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.GranaryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Wood {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WoodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Wood\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WoodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Clay {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.ClayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Clay\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.ClayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Iron {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.IronColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Iron\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.IronColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Crop {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.CropColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Crop\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.CropColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WoodPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WoodPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WoodPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WoodPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClayPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.ClayPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClayPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.ClayPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IronPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.IronPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IronPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.IronPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.CropPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CropPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.CropPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlayerName {
                get {
                    try {
                        return ((string)(this[this.tableGetProduction.PlayerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PlayerName\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.PlayerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVillageNameNull() {
                return this.IsNull(this.tableGetProduction.VillageNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVillageNameNull() {
                this[this.tableGetProduction.VillageNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVillageIdNull() {
                return this.IsNull(this.tableGetProduction.VillageIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVillageIdNull() {
                this[this.tableGetProduction.VillageIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableGetProduction.WarehouseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableGetProduction.WarehouseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranaryNull() {
                return this.IsNull(this.tableGetProduction.GranaryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranaryNull() {
                this[this.tableGetProduction.GranaryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodNull() {
                return this.IsNull(this.tableGetProduction.WoodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodNull() {
                this[this.tableGetProduction.WoodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayNull() {
                return this.IsNull(this.tableGetProduction.ClayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayNull() {
                this[this.tableGetProduction.ClayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronNull() {
                return this.IsNull(this.tableGetProduction.IronColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronNull() {
                this[this.tableGetProduction.IronColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropNull() {
                return this.IsNull(this.tableGetProduction.CropColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropNull() {
                this[this.tableGetProduction.CropColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodPerHourNull() {
                return this.IsNull(this.tableGetProduction.WoodPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodPerHourNull() {
                this[this.tableGetProduction.WoodPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayPerHourNull() {
                return this.IsNull(this.tableGetProduction.ClayPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayPerHourNull() {
                this[this.tableGetProduction.ClayPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronPerHourNull() {
                return this.IsNull(this.tableGetProduction.IronPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronPerHourNull() {
                this[this.tableGetProduction.IronPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropPerHourNull() {
                return this.IsNull(this.tableGetProduction.CropPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropPerHourNull() {
                this[this.tableGetProduction.CropPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlayerNameNull() {
                return this.IsNull(this.tableGetProduction.PlayerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlayerNameNull() {
                this[this.tableGetProduction.PlayerNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BuildingsRowChangeEvent : System.EventArgs {
            
            private BuildingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsRowChangeEvent(BuildingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlayersRowChangeEvent : System.EventArgs {
            
            private PlayersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersRowChangeEvent(PlayersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlayersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PriorityRowChangeEvent : System.EventArgs {
            
            private PriorityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityRowChangeEvent(PriorityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriorityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionRowChangeEvent : System.EventArgs {
            
            private ProductionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionRowChangeEvent(ProductionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResourcesRowChangeEvent : System.EventArgs {
            
            private ResourcesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRowChangeEvent(ResourcesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaskListRowChangeEvent : System.EventArgs {
            
            private TaskListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListRowChangeEvent(TaskListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaskListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TasksRowChangeEvent : System.EventArgs {
            
            private TasksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksRowChangeEvent(TasksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TasksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VillagesRowChangeEvent : System.EventArgs {
            
            private VillagesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesRowChangeEvent(VillagesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VillagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetProductionRowChangeEvent : System.EventArgs {
            
            private GetProductionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRowChangeEvent(GetProductionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GUI.TravianBotDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BuildingsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BuildingsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Buildings";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("BuildingFullName", "BuildingFullName");
            tableMapping.ColumnMappings.Add("BuildingId", "BuildingId");
            tableMapping.ColumnMappings.Add("BuildingName", "BuildingName");
            tableMapping.ColumnMappings.Add("BuildingLevel", "BuildingLevel");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Buildings] ([VillageId], [BuildingFullName], [BuildingId], [Bu" +
                "ildingName], [BuildingLevel], [PlayerId]) VALUES (@VillageId, @BuildingFullName," +
                " @BuildingId, @BuildingName, @BuildingLevel, @PlayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingFullName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingFullName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildingLevel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildingLevel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, VillageId, BuildingFullName, BuildingId, BuildingName, BuildingLevel, " +
                "PlayerId FROM dbo.Buildings";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.BuildingsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.BuildingsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.BuildingsDataTable dataTable = new TravianBotDataSet.BuildingsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.BuildingsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Buildings");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int VillageId, string BuildingFullName, int BuildingId, string BuildingName, int BuildingLevel, int PlayerId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(VillageId));
            if ((BuildingFullName == null)) {
                throw new System.ArgumentNullException("BuildingFullName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BuildingFullName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(BuildingId));
            if ((BuildingName == null)) {
                throw new System.ArgumentNullException("BuildingName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BuildingName));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(BuildingLevel));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(PlayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlayersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PlayersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Players";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            tableMapping.ColumnMappings.Add("PlayerName", "PlayerName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Players] ([PlayerId], [PlayerName]) VALUES (@PlayerId, @Player" +
                "Name)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, PlayerId, PlayerName FROM dbo.Players";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.PlayersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.PlayersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.PlayersDataTable dataTable = new TravianBotDataSet.PlayersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.PlayersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Players");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PlayerId, string PlayerName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PlayerId));
            if ((PlayerName == null)) {
                throw new System.ArgumentNullException("PlayerName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PlayerName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PriorityTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PriorityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Priority";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("PriorityName", "PriorityName");
            tableMapping.ColumnMappings.Add("PriorityLevel", "PriorityLevel");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Priority] ([PriorityName], [PriorityLevel]) VALUES (@PriorityN" +
                "ame, @PriorityLevel)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriorityName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PriorityName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriorityLevel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PriorityLevel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, PriorityName, PriorityLevel FROM dbo.Priority";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.PriorityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.PriorityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.PriorityDataTable dataTable = new TravianBotDataSet.PriorityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.PriorityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Priority");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PriorityName, int PriorityLevel) {
            if ((PriorityName == null)) {
                throw new System.ArgumentNullException("PriorityName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PriorityName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(PriorityLevel));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Production";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("Warehouse", "Warehouse");
            tableMapping.ColumnMappings.Add("Granary", "Granary");
            tableMapping.ColumnMappings.Add("Wood", "Wood");
            tableMapping.ColumnMappings.Add("Clay", "Clay");
            tableMapping.ColumnMappings.Add("Iron", "Iron");
            tableMapping.ColumnMappings.Add("Crop", "Crop");
            tableMapping.ColumnMappings.Add("WoodPerHour", "WoodPerHour");
            tableMapping.ColumnMappings.Add("ClayPerHour", "ClayPerHour");
            tableMapping.ColumnMappings.Add("IronPerHour", "IronPerHour");
            tableMapping.ColumnMappings.Add("CropPerHour", "CropPerHour");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Production] ([VillageId], [Warehouse], [Granary], [Wood], [Clay], [Iron], [Crop], [WoodPerHour], [ClayPerHour], [IronPerHour], [CropPerHour], [PlayerId]) VALUES (@VillageId, @Warehouse, @Granary, @Wood, @Clay, @Iron, @Crop, @WoodPerHour, @ClayPerHour, @IronPerHour, @CropPerHour, @PlayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Warehouse", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Warehouse", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Granary", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Granary", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Wood", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Wood", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Clay", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Clay", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Iron", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Iron", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Crop", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Crop", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WoodPerHour", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WoodPerHour", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClayPerHour", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ClayPerHour", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IronPerHour", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IronPerHour", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CropPerHour", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CropPerHour", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, VillageId, Warehouse, Granary, Wood, Clay, Iron, Crop, WoodPerHour, Cl" +
                "ayPerHour, IronPerHour, CropPerHour, PlayerId FROM dbo.Production";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.ProductionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.ProductionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.ProductionDataTable dataTable = new TravianBotDataSet.ProductionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.ProductionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Production");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int VillageId, System.Nullable<int> Warehouse, System.Nullable<int> Granary, System.Nullable<int> Wood, System.Nullable<int> Clay, System.Nullable<int> Iron, System.Nullable<int> Crop, System.Nullable<int> WoodPerHour, System.Nullable<int> ClayPerHour, System.Nullable<int> IronPerHour, System.Nullable<int> CropPerHour, int PlayerId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(VillageId));
            if ((Warehouse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Warehouse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Granary.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Granary.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Wood.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Wood.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Clay.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Clay.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Iron.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Iron.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Crop.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Crop.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((WoodPerHour.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(WoodPerHour.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((ClayPerHour.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ClayPerHour.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IronPerHour.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(IronPerHour.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((CropPerHour.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(CropPerHour.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(PlayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ResourcesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ResourcesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Resources";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("ResourcesFullName", "ResourcesFullName");
            tableMapping.ColumnMappings.Add("ResourcesId", "ResourcesId");
            tableMapping.ColumnMappings.Add("ResourcesName", "ResourcesName");
            tableMapping.ColumnMappings.Add("ResourcesLevel", "ResourcesLevel");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Resources] ([VillageId], [ResourcesFullName], [ResourcesId], [" +
                "ResourcesName], [ResourcesLevel], [PlayerId]) VALUES (@VillageId, @ResourcesFull" +
                "Name, @ResourcesId, @ResourcesName, @ResourcesLevel, @PlayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesFullName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ResourcesFullName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ResourcesId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ResourcesName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesLevel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ResourcesLevel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, VillageId, ResourcesFullName, ResourcesId, ResourcesName, ResourcesLev" +
                "el, PlayerId FROM dbo.Resources";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.ResourcesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.ResourcesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.ResourcesDataTable dataTable = new TravianBotDataSet.ResourcesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.ResourcesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Resources");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int VillageId, string ResourcesFullName, int ResourcesId, string ResourcesName, int ResourcesLevel, int PlayerId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(VillageId));
            if ((ResourcesFullName == null)) {
                throw new System.ArgumentNullException("ResourcesFullName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ResourcesFullName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ResourcesId));
            if ((ResourcesName == null)) {
                throw new System.ArgumentNullException("ResourcesName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ResourcesName));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ResourcesLevel));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(PlayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TaskListTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TaskListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TaskList";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TaskId", "TaskId");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("BuildId", "BuildId");
            tableMapping.ColumnMappings.Add("PriorityId", "PriorityId");
            tableMapping.ColumnMappings.Add("BuildLevel", "BuildLevel");
            tableMapping.ColumnMappings.Add("NextCheck", "NextCheck");
            tableMapping.ColumnMappings.Add("Enabled", "Enabled");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TaskList] ([TaskId], [VillageId], [BuildId], [PriorityId], [Bu" +
                "ildLevel], [NextCheck], [Enabled], [PlayerId]) VALUES (@TaskId, @VillageId, @Bui" +
                "ldId, @PriorityId, @BuildLevel, @NextCheck, @Enabled, @PlayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TaskId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TaskId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriorityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PriorityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildLevel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BuildLevel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NextCheck", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NextCheck", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Enabled", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Enabled", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, TaskId, VillageId, BuildId, PriorityId, BuildLevel, NextCheck, Enabled" +
                ", PlayerId FROM dbo.TaskList";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.TaskListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.TaskListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.TaskListDataTable dataTable = new TravianBotDataSet.TaskListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.TaskListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TaskList");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TaskId, int VillageId, int BuildId, int PriorityId, int BuildLevel, System.DateTime NextCheck, int Enabled, int PlayerId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TaskId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(VillageId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(BuildId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(PriorityId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(BuildLevel));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(NextCheck));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Enabled));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(PlayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TasksTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TasksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tasks";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TaskName", "TaskName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tasks] ([TaskName]) VALUES (@TaskName)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TaskName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TaskName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, TaskName FROM dbo.Tasks";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.TasksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.TasksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.TasksDataTable dataTable = new TravianBotDataSet.TasksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.TasksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Tasks");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TaskName) {
            if ((TaskName == null)) {
                throw new System.ArgumentNullException("TaskName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TaskName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VillagesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VillagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Villages";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("VillageName", "VillageName");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Villages] ([VillageId], [VillageName], [PlayerId]) VALUES (@Vi" +
                "llageId, @VillageName, @PlayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "VillageName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PlayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, VillageId, VillageName, PlayerId FROM dbo.Villages";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.VillagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.VillagesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.VillagesDataTable dataTable = new TravianBotDataSet.VillagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet.VillagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(TravianBotDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Villages");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int VillageId, string VillageName, int PlayerId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(VillageId));
            if ((VillageName == null)) {
                throw new System.ArgumentNullException("VillageName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VillageName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(PlayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetProductionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetProductionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetProduction";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageName", "VillageName");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("Warehouse", "Warehouse");
            tableMapping.ColumnMappings.Add("Granary", "Granary");
            tableMapping.ColumnMappings.Add("Wood", "Wood");
            tableMapping.ColumnMappings.Add("Clay", "Clay");
            tableMapping.ColumnMappings.Add("Iron", "Iron");
            tableMapping.ColumnMappings.Add("Crop", "Crop");
            tableMapping.ColumnMappings.Add("WoodPerHour", "WoodPerHour");
            tableMapping.ColumnMappings.Add("ClayPerHour", "ClayPerHour");
            tableMapping.ColumnMappings.Add("IronPerHour", "IronPerHour");
            tableMapping.ColumnMappings.Add("CropPerHour", "CropPerHour");
            tableMapping.ColumnMappings.Add("PlayerName", "PlayerName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetProduction";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetProductionDataTable dataTable, System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetProductionDataTable GetData(System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            TravianBotDataSet.GetProductionDataTable dataTable = new TravianBotDataSet.GetProductionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.IDbCommand[] _commandCollection;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.IDbCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new System.Data.SqlClient.SqlConnection(global::GUI.Properties.Settings.Default.TravianBotConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.InsertProduction";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Warehouse", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Granary", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Wood", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Clay", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Iron", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Crop", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@WoodPerHour", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClayPerHour", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@IronPerHour", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CropPerHour", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new System.Data.SqlClient.SqlConnection(global::GUI.Properties.Settings.Default.TravianBotConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.InsertResources";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesFullName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourcesLevel", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new System.Data.SqlClient.SqlConnection(global::GUI.Properties.Settings.Default.TravianBotConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = "dbo.InsertVillage";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageName", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertProduction(System.Nullable<int> VillageId, System.Nullable<int> Warehouse, System.Nullable<int> Granary, System.Nullable<int> Wood, System.Nullable<int> Clay, System.Nullable<int> Iron, System.Nullable<int> Crop, System.Nullable<int> WoodPerHour, System.Nullable<int> ClayPerHour, System.Nullable<int> IronPerHour, System.Nullable<int> CropPerHour, System.Nullable<int> PlayerId) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((VillageId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(VillageId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Warehouse.HasValue == true)) {
                command.Parameters[2].Value = ((int)(Warehouse.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Granary.HasValue == true)) {
                command.Parameters[3].Value = ((int)(Granary.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Wood.HasValue == true)) {
                command.Parameters[4].Value = ((int)(Wood.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Clay.HasValue == true)) {
                command.Parameters[5].Value = ((int)(Clay.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Iron.HasValue == true)) {
                command.Parameters[6].Value = ((int)(Iron.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Crop.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Crop.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((WoodPerHour.HasValue == true)) {
                command.Parameters[8].Value = ((int)(WoodPerHour.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            if ((ClayPerHour.HasValue == true)) {
                command.Parameters[9].Value = ((int)(ClayPerHour.Value));
            }
            else {
                command.Parameters[9].Value = System.DBNull.Value;
            }
            if ((IronPerHour.HasValue == true)) {
                command.Parameters[10].Value = ((int)(IronPerHour.Value));
            }
            else {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            if ((CropPerHour.HasValue == true)) {
                command.Parameters[11].Value = ((int)(CropPerHour.Value));
            }
            else {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            if ((PlayerId.HasValue == true)) {
                command.Parameters[12].Value = ((int)(PlayerId.Value));
            }
            else {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertResources(System.Nullable<int> VillageId, string ResourcesFullName, System.Nullable<int> ResourcesId, string ResourcesName, System.Nullable<int> ResourcesLevel, System.Nullable<int> PlayerId) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((VillageId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(VillageId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ResourcesFullName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(ResourcesFullName));
            }
            if ((ResourcesId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(ResourcesId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((ResourcesName == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(ResourcesName));
            }
            if ((ResourcesLevel.HasValue == true)) {
                command.Parameters[5].Value = ((int)(ResourcesLevel.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((PlayerId.HasValue == true)) {
                command.Parameters[6].Value = ((int)(PlayerId.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertVillage(System.Nullable<int> VillageId, string VillageName, System.Nullable<int> PlayerId) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            if ((VillageId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(VillageId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((VillageName == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(VillageName));
            }
            if ((PlayerId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(PlayerId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591