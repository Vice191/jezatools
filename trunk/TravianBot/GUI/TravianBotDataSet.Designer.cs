//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GUI {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("TravianBotDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TravianBotDataSet : System.Data.DataSet {
        
        private GetBuildIdsDataTable tableGetBuildIds;
        
        private GetPriorityDataTable tableGetPriority;
        
        private GetTaskListForGUIDataTable tableGetTaskListForGUI;
        
        private GetTasksDataTable tableGetTasks;
        
        private GetVillagesDataTable tableGetVillages;
        
        private GetProductionDataTable tableGetProduction;
        
        private GetAttackTypesDataTable tableGetAttackTypes;
        
        private GetTroopTypesDataTable tableGetTroopTypes;
        
        private GetTribesDataTable tableGetTribes;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TravianBotDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TravianBotDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetBuildIds"] != null)) {
                    base.Tables.Add(new GetBuildIdsDataTable(ds.Tables["GetBuildIds"]));
                }
                if ((ds.Tables["GetPriority"] != null)) {
                    base.Tables.Add(new GetPriorityDataTable(ds.Tables["GetPriority"]));
                }
                if ((ds.Tables["GetTaskListForGUI"] != null)) {
                    base.Tables.Add(new GetTaskListForGUIDataTable(ds.Tables["GetTaskListForGUI"]));
                }
                if ((ds.Tables["GetTasks"] != null)) {
                    base.Tables.Add(new GetTasksDataTable(ds.Tables["GetTasks"]));
                }
                if ((ds.Tables["GetVillages"] != null)) {
                    base.Tables.Add(new GetVillagesDataTable(ds.Tables["GetVillages"]));
                }
                if ((ds.Tables["GetProduction"] != null)) {
                    base.Tables.Add(new GetProductionDataTable(ds.Tables["GetProduction"]));
                }
                if ((ds.Tables["GetAttackTypes"] != null)) {
                    base.Tables.Add(new GetAttackTypesDataTable(ds.Tables["GetAttackTypes"]));
                }
                if ((ds.Tables["GetTroopTypes"] != null)) {
                    base.Tables.Add(new GetTroopTypesDataTable(ds.Tables["GetTroopTypes"]));
                }
                if ((ds.Tables["GetTribes"] != null)) {
                    base.Tables.Add(new GetTribesDataTable(ds.Tables["GetTribes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetBuildIdsDataTable GetBuildIds {
            get {
                return this.tableGetBuildIds;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPriorityDataTable GetPriority {
            get {
                return this.tableGetPriority;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTaskListForGUIDataTable GetTaskListForGUI {
            get {
                return this.tableGetTaskListForGUI;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTasksDataTable GetTasks {
            get {
                return this.tableGetTasks;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetVillagesDataTable GetVillages {
            get {
                return this.tableGetVillages;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetProductionDataTable GetProduction {
            get {
                return this.tableGetProduction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAttackTypesDataTable GetAttackTypes {
            get {
                return this.tableGetAttackTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTroopTypesDataTable GetTroopTypes {
            get {
                return this.tableGetTroopTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetTribesDataTable GetTribes {
            get {
                return this.tableGetTribes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            TravianBotDataSet cln = ((TravianBotDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetBuildIds"] != null)) {
                    base.Tables.Add(new GetBuildIdsDataTable(ds.Tables["GetBuildIds"]));
                }
                if ((ds.Tables["GetPriority"] != null)) {
                    base.Tables.Add(new GetPriorityDataTable(ds.Tables["GetPriority"]));
                }
                if ((ds.Tables["GetTaskListForGUI"] != null)) {
                    base.Tables.Add(new GetTaskListForGUIDataTable(ds.Tables["GetTaskListForGUI"]));
                }
                if ((ds.Tables["GetTasks"] != null)) {
                    base.Tables.Add(new GetTasksDataTable(ds.Tables["GetTasks"]));
                }
                if ((ds.Tables["GetVillages"] != null)) {
                    base.Tables.Add(new GetVillagesDataTable(ds.Tables["GetVillages"]));
                }
                if ((ds.Tables["GetProduction"] != null)) {
                    base.Tables.Add(new GetProductionDataTable(ds.Tables["GetProduction"]));
                }
                if ((ds.Tables["GetAttackTypes"] != null)) {
                    base.Tables.Add(new GetAttackTypesDataTable(ds.Tables["GetAttackTypes"]));
                }
                if ((ds.Tables["GetTroopTypes"] != null)) {
                    base.Tables.Add(new GetTroopTypesDataTable(ds.Tables["GetTroopTypes"]));
                }
                if ((ds.Tables["GetTribes"] != null)) {
                    base.Tables.Add(new GetTribesDataTable(ds.Tables["GetTribes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetBuildIds = ((GetBuildIdsDataTable)(base.Tables["GetBuildIds"]));
            if ((initTable == true)) {
                if ((this.tableGetBuildIds != null)) {
                    this.tableGetBuildIds.InitVars();
                }
            }
            this.tableGetPriority = ((GetPriorityDataTable)(base.Tables["GetPriority"]));
            if ((initTable == true)) {
                if ((this.tableGetPriority != null)) {
                    this.tableGetPriority.InitVars();
                }
            }
            this.tableGetTaskListForGUI = ((GetTaskListForGUIDataTable)(base.Tables["GetTaskListForGUI"]));
            if ((initTable == true)) {
                if ((this.tableGetTaskListForGUI != null)) {
                    this.tableGetTaskListForGUI.InitVars();
                }
            }
            this.tableGetTasks = ((GetTasksDataTable)(base.Tables["GetTasks"]));
            if ((initTable == true)) {
                if ((this.tableGetTasks != null)) {
                    this.tableGetTasks.InitVars();
                }
            }
            this.tableGetVillages = ((GetVillagesDataTable)(base.Tables["GetVillages"]));
            if ((initTable == true)) {
                if ((this.tableGetVillages != null)) {
                    this.tableGetVillages.InitVars();
                }
            }
            this.tableGetProduction = ((GetProductionDataTable)(base.Tables["GetProduction"]));
            if ((initTable == true)) {
                if ((this.tableGetProduction != null)) {
                    this.tableGetProduction.InitVars();
                }
            }
            this.tableGetAttackTypes = ((GetAttackTypesDataTable)(base.Tables["GetAttackTypes"]));
            if ((initTable == true)) {
                if ((this.tableGetAttackTypes != null)) {
                    this.tableGetAttackTypes.InitVars();
                }
            }
            this.tableGetTroopTypes = ((GetTroopTypesDataTable)(base.Tables["GetTroopTypes"]));
            if ((initTable == true)) {
                if ((this.tableGetTroopTypes != null)) {
                    this.tableGetTroopTypes.InitVars();
                }
            }
            this.tableGetTribes = ((GetTribesDataTable)(base.Tables["GetTribes"]));
            if ((initTable == true)) {
                if ((this.tableGetTribes != null)) {
                    this.tableGetTribes.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TravianBotDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TravianBotDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetBuildIds = new GetBuildIdsDataTable();
            base.Tables.Add(this.tableGetBuildIds);
            this.tableGetPriority = new GetPriorityDataTable();
            base.Tables.Add(this.tableGetPriority);
            this.tableGetTaskListForGUI = new GetTaskListForGUIDataTable();
            base.Tables.Add(this.tableGetTaskListForGUI);
            this.tableGetTasks = new GetTasksDataTable();
            base.Tables.Add(this.tableGetTasks);
            this.tableGetVillages = new GetVillagesDataTable();
            base.Tables.Add(this.tableGetVillages);
            this.tableGetProduction = new GetProductionDataTable();
            base.Tables.Add(this.tableGetProduction);
            this.tableGetAttackTypes = new GetAttackTypesDataTable();
            base.Tables.Add(this.tableGetAttackTypes);
            this.tableGetTroopTypes = new GetTroopTypesDataTable();
            base.Tables.Add(this.tableGetTroopTypes);
            this.tableGetTribes = new GetTribesDataTable();
            base.Tables.Add(this.tableGetTribes);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetBuildIds() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetPriority() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTaskListForGUI() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTasks() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetVillages() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetProduction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAttackTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTroopTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetTribes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            TravianBotDataSet ds = new TravianBotDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void GetBuildIdsRowChangeEventHandler(object sender, GetBuildIdsRowChangeEvent e);
        
        public delegate void GetPriorityRowChangeEventHandler(object sender, GetPriorityRowChangeEvent e);
        
        public delegate void GetTaskListForGUIRowChangeEventHandler(object sender, GetTaskListForGUIRowChangeEvent e);
        
        public delegate void GetTasksRowChangeEventHandler(object sender, GetTasksRowChangeEvent e);
        
        public delegate void GetVillagesRowChangeEventHandler(object sender, GetVillagesRowChangeEvent e);
        
        public delegate void GetProductionRowChangeEventHandler(object sender, GetProductionRowChangeEvent e);
        
        public delegate void GetAttackTypesRowChangeEventHandler(object sender, GetAttackTypesRowChangeEvent e);
        
        public delegate void GetTroopTypesRowChangeEventHandler(object sender, GetTroopTypesRowChangeEvent e);
        
        public delegate void GetTribesRowChangeEventHandler(object sender, GetTribesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetBuildIdsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnBuildId;
            
            private System.Data.DataColumn columnBuildIdName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsDataTable() {
                this.TableName = "GetBuildIds";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetBuildIdsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetBuildIdsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildIdColumn {
                get {
                    return this.columnBuildId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildIdNameColumn {
                get {
                    return this.columnBuildIdName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsRow this[int index] {
                get {
                    return ((GetBuildIdsRow)(this.Rows[index]));
                }
            }
            
            public event GetBuildIdsRowChangeEventHandler GetBuildIdsRowChanging;
            
            public event GetBuildIdsRowChangeEventHandler GetBuildIdsRowChanged;
            
            public event GetBuildIdsRowChangeEventHandler GetBuildIdsRowDeleting;
            
            public event GetBuildIdsRowChangeEventHandler GetBuildIdsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetBuildIdsRow(GetBuildIdsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsRow AddGetBuildIdsRow(int ID, int BuildId, string BuildIdName) {
                GetBuildIdsRow rowGetBuildIdsRow = ((GetBuildIdsRow)(this.NewRow()));
                rowGetBuildIdsRow.ItemArray = new object[] {
                        ID,
                        BuildId,
                        BuildIdName};
                this.Rows.Add(rowGetBuildIdsRow);
                return rowGetBuildIdsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetBuildIdsDataTable cln = ((GetBuildIdsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetBuildIdsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBuildId = base.Columns["BuildId"];
                this.columnBuildIdName = base.Columns["BuildIdName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBuildId = new System.Data.DataColumn("BuildId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildId);
                this.columnBuildIdName = new System.Data.DataColumn("BuildIdName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildIdName);
                this.columnID.AllowDBNull = false;
                this.columnBuildId.AllowDBNull = false;
                this.columnBuildIdName.AllowDBNull = false;
                this.columnBuildIdName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsRow NewGetBuildIdsRow() {
                return ((GetBuildIdsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetBuildIdsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetBuildIdsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetBuildIdsRowChanged != null)) {
                    this.GetBuildIdsRowChanged(this, new GetBuildIdsRowChangeEvent(((GetBuildIdsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetBuildIdsRowChanging != null)) {
                    this.GetBuildIdsRowChanging(this, new GetBuildIdsRowChangeEvent(((GetBuildIdsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetBuildIdsRowDeleted != null)) {
                    this.GetBuildIdsRowDeleted(this, new GetBuildIdsRowChangeEvent(((GetBuildIdsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetBuildIdsRowDeleting != null)) {
                    this.GetBuildIdsRowDeleting(this, new GetBuildIdsRowChangeEvent(((GetBuildIdsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetBuildIdsRow(GetBuildIdsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetBuildIdsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPriorityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnPriorityLevel;
            
            private System.Data.DataColumn columnPriorityName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityDataTable() {
                this.TableName = "GetPriority";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPriorityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetPriorityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityLevelColumn {
                get {
                    return this.columnPriorityLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityNameColumn {
                get {
                    return this.columnPriorityName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityRow this[int index] {
                get {
                    return ((GetPriorityRow)(this.Rows[index]));
                }
            }
            
            public event GetPriorityRowChangeEventHandler GetPriorityRowChanging;
            
            public event GetPriorityRowChangeEventHandler GetPriorityRowChanged;
            
            public event GetPriorityRowChangeEventHandler GetPriorityRowDeleting;
            
            public event GetPriorityRowChangeEventHandler GetPriorityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetPriorityRow(GetPriorityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityRow AddGetPriorityRow(int PriorityLevel, string PriorityName) {
                GetPriorityRow rowGetPriorityRow = ((GetPriorityRow)(this.NewRow()));
                rowGetPriorityRow.ItemArray = new object[] {
                        null,
                        PriorityLevel,
                        PriorityName};
                this.Rows.Add(rowGetPriorityRow);
                return rowGetPriorityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetPriorityDataTable cln = ((GetPriorityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetPriorityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPriorityLevel = base.Columns["PriorityLevel"];
                this.columnPriorityName = base.Columns["PriorityName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPriorityLevel = new System.Data.DataColumn("PriorityLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityLevel);
                this.columnPriorityName = new System.Data.DataColumn("PriorityName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnPriorityLevel.AllowDBNull = false;
                this.columnPriorityName.AllowDBNull = false;
                this.columnPriorityName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityRow NewGetPriorityRow() {
                return ((GetPriorityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetPriorityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetPriorityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPriorityRowChanged != null)) {
                    this.GetPriorityRowChanged(this, new GetPriorityRowChangeEvent(((GetPriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPriorityRowChanging != null)) {
                    this.GetPriorityRowChanging(this, new GetPriorityRowChangeEvent(((GetPriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPriorityRowDeleted != null)) {
                    this.GetPriorityRowDeleted(this, new GetPriorityRowChangeEvent(((GetPriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPriorityRowDeleting != null)) {
                    this.GetPriorityRowDeleting(this, new GetPriorityRowChangeEvent(((GetPriorityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetPriorityRow(GetPriorityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPriorityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTaskListForGUIDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTaskName;
            
            private System.Data.DataColumn columnVillageName;
            
            private System.Data.DataColumn columnBuildId;
            
            private System.Data.DataColumn columnPriority;
            
            private System.Data.DataColumn columnBuildLevel;
            
            private System.Data.DataColumn columnNextCheck;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIDataTable() {
                this.TableName = "GetTaskListForGUI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTaskListForGUIDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTaskListForGUIDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaskNameColumn {
                get {
                    return this.columnTaskName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageNameColumn {
                get {
                    return this.columnVillageName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildIdColumn {
                get {
                    return this.columnBuildId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BuildLevelColumn {
                get {
                    return this.columnBuildLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextCheckColumn {
                get {
                    return this.columnNextCheck;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIRow this[int index] {
                get {
                    return ((GetTaskListForGUIRow)(this.Rows[index]));
                }
            }
            
            public event GetTaskListForGUIRowChangeEventHandler GetTaskListForGUIRowChanging;
            
            public event GetTaskListForGUIRowChangeEventHandler GetTaskListForGUIRowChanged;
            
            public event GetTaskListForGUIRowChangeEventHandler GetTaskListForGUIRowDeleting;
            
            public event GetTaskListForGUIRowChangeEventHandler GetTaskListForGUIRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTaskListForGUIRow(GetTaskListForGUIRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIRow AddGetTaskListForGUIRow(string TaskName, string VillageName, int BuildId, string Priority, int BuildLevel, System.DateTime NextCheck) {
                GetTaskListForGUIRow rowGetTaskListForGUIRow = ((GetTaskListForGUIRow)(this.NewRow()));
                rowGetTaskListForGUIRow.ItemArray = new object[] {
                        TaskName,
                        VillageName,
                        BuildId,
                        Priority,
                        BuildLevel,
                        NextCheck};
                this.Rows.Add(rowGetTaskListForGUIRow);
                return rowGetTaskListForGUIRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetTaskListForGUIDataTable cln = ((GetTaskListForGUIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetTaskListForGUIDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaskName = base.Columns["TaskName"];
                this.columnVillageName = base.Columns["VillageName"];
                this.columnBuildId = base.Columns["BuildId"];
                this.columnPriority = base.Columns["Priority"];
                this.columnBuildLevel = base.Columns["BuildLevel"];
                this.columnNextCheck = base.Columns["NextCheck"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaskName = new System.Data.DataColumn("TaskName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskName);
                this.columnVillageName = new System.Data.DataColumn("VillageName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageName);
                this.columnBuildId = new System.Data.DataColumn("BuildId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildId);
                this.columnPriority = new System.Data.DataColumn("Priority", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnBuildLevel = new System.Data.DataColumn("BuildLevel", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildLevel);
                this.columnNextCheck = new System.Data.DataColumn("NextCheck", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextCheck);
                this.columnTaskName.ReadOnly = true;
                this.columnTaskName.MaxLength = 50;
                this.columnVillageName.ReadOnly = true;
                this.columnVillageName.MaxLength = 50;
                this.columnBuildId.AllowDBNull = false;
                this.columnPriority.ReadOnly = true;
                this.columnPriority.MaxLength = 50;
                this.columnBuildLevel.AllowDBNull = false;
                this.columnNextCheck.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIRow NewGetTaskListForGUIRow() {
                return ((GetTaskListForGUIRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetTaskListForGUIRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetTaskListForGUIRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTaskListForGUIRowChanged != null)) {
                    this.GetTaskListForGUIRowChanged(this, new GetTaskListForGUIRowChangeEvent(((GetTaskListForGUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTaskListForGUIRowChanging != null)) {
                    this.GetTaskListForGUIRowChanging(this, new GetTaskListForGUIRowChangeEvent(((GetTaskListForGUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTaskListForGUIRowDeleted != null)) {
                    this.GetTaskListForGUIRowDeleted(this, new GetTaskListForGUIRowChangeEvent(((GetTaskListForGUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTaskListForGUIRowDeleting != null)) {
                    this.GetTaskListForGUIRowDeleting(this, new GetTaskListForGUIRowChangeEvent(((GetTaskListForGUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTaskListForGUIRow(GetTaskListForGUIRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTaskListForGUIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTasksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTaskId;
            
            private System.Data.DataColumn columnTaskName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksDataTable() {
                this.TableName = "GetTasks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTasksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTasksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaskIdColumn {
                get {
                    return this.columnTaskId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaskNameColumn {
                get {
                    return this.columnTaskName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksRow this[int index] {
                get {
                    return ((GetTasksRow)(this.Rows[index]));
                }
            }
            
            public event GetTasksRowChangeEventHandler GetTasksRowChanging;
            
            public event GetTasksRowChangeEventHandler GetTasksRowChanged;
            
            public event GetTasksRowChangeEventHandler GetTasksRowDeleting;
            
            public event GetTasksRowChangeEventHandler GetTasksRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTasksRow(GetTasksRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksRow AddGetTasksRow(int TaskId, string TaskName) {
                GetTasksRow rowGetTasksRow = ((GetTasksRow)(this.NewRow()));
                rowGetTasksRow.ItemArray = new object[] {
                        null,
                        TaskId,
                        TaskName};
                this.Rows.Add(rowGetTasksRow);
                return rowGetTasksRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetTasksDataTable cln = ((GetTasksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetTasksDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTaskId = base.Columns["TaskId"];
                this.columnTaskName = base.Columns["TaskName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTaskId = new System.Data.DataColumn("TaskId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskId);
                this.columnTaskName = new System.Data.DataColumn("TaskName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnTaskId.AllowDBNull = false;
                this.columnTaskName.AllowDBNull = false;
                this.columnTaskName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksRow NewGetTasksRow() {
                return ((GetTasksRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetTasksRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetTasksRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTasksRowChanged != null)) {
                    this.GetTasksRowChanged(this, new GetTasksRowChangeEvent(((GetTasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTasksRowChanging != null)) {
                    this.GetTasksRowChanging(this, new GetTasksRowChangeEvent(((GetTasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTasksRowDeleted != null)) {
                    this.GetTasksRowDeleted(this, new GetTasksRowChangeEvent(((GetTasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTasksRowDeleting != null)) {
                    this.GetTasksRowDeleting(this, new GetTasksRowChangeEvent(((GetTasksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTasksRow(GetTasksRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTasksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetVillagesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnVillageName;
            
            private System.Data.DataColumn columnPlayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesDataTable() {
                this.TableName = "GetVillages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetVillagesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetVillagesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageNameColumn {
                get {
                    return this.columnVillageName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerIdColumn {
                get {
                    return this.columnPlayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesRow this[int index] {
                get {
                    return ((GetVillagesRow)(this.Rows[index]));
                }
            }
            
            public event GetVillagesRowChangeEventHandler GetVillagesRowChanging;
            
            public event GetVillagesRowChangeEventHandler GetVillagesRowChanged;
            
            public event GetVillagesRowChangeEventHandler GetVillagesRowDeleting;
            
            public event GetVillagesRowChangeEventHandler GetVillagesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetVillagesRow(GetVillagesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesRow AddGetVillagesRow(int VillageId, string VillageName, int PlayerId) {
                GetVillagesRow rowGetVillagesRow = ((GetVillagesRow)(this.NewRow()));
                rowGetVillagesRow.ItemArray = new object[] {
                        null,
                        VillageId,
                        VillageName,
                        PlayerId};
                this.Rows.Add(rowGetVillagesRow);
                return rowGetVillagesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetVillagesDataTable cln = ((GetVillagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetVillagesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnVillageName = base.Columns["VillageName"];
                this.columnPlayerId = base.Columns["PlayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnVillageName = new System.Data.DataColumn("VillageName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageName);
                this.columnPlayerId = new System.Data.DataColumn("PlayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerId);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageId.AllowDBNull = false;
                this.columnVillageName.AllowDBNull = false;
                this.columnVillageName.MaxLength = 50;
                this.columnPlayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesRow NewGetVillagesRow() {
                return ((GetVillagesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetVillagesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetVillagesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetVillagesRowChanged != null)) {
                    this.GetVillagesRowChanged(this, new GetVillagesRowChangeEvent(((GetVillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetVillagesRowChanging != null)) {
                    this.GetVillagesRowChanging(this, new GetVillagesRowChangeEvent(((GetVillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetVillagesRowDeleted != null)) {
                    this.GetVillagesRowDeleted(this, new GetVillagesRowChangeEvent(((GetVillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetVillagesRowDeleting != null)) {
                    this.GetVillagesRowDeleting(this, new GetVillagesRowChangeEvent(((GetVillagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetVillagesRow(GetVillagesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetVillagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetProductionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnVillageName;
            
            private System.Data.DataColumn columnVillageId;
            
            private System.Data.DataColumn columnWarehouse;
            
            private System.Data.DataColumn columnGranary;
            
            private System.Data.DataColumn columnWood;
            
            private System.Data.DataColumn columnClay;
            
            private System.Data.DataColumn columnIron;
            
            private System.Data.DataColumn columnCrop;
            
            private System.Data.DataColumn columnWoodPerHour;
            
            private System.Data.DataColumn columnClayPerHour;
            
            private System.Data.DataColumn columnIronPerHour;
            
            private System.Data.DataColumn columnCropPerHour;
            
            private System.Data.DataColumn columnPlayerName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionDataTable() {
                this.TableName = "GetProduction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetProductionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetProductionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageNameColumn {
                get {
                    return this.columnVillageName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VillageIdColumn {
                get {
                    return this.columnVillageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GranaryColumn {
                get {
                    return this.columnGranary;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodColumn {
                get {
                    return this.columnWood;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayColumn {
                get {
                    return this.columnClay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronColumn {
                get {
                    return this.columnIron;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropColumn {
                get {
                    return this.columnCrop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WoodPerHourColumn {
                get {
                    return this.columnWoodPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClayPerHourColumn {
                get {
                    return this.columnClayPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IronPerHourColumn {
                get {
                    return this.columnIronPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CropPerHourColumn {
                get {
                    return this.columnCropPerHour;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PlayerNameColumn {
                get {
                    return this.columnPlayerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow this[int index] {
                get {
                    return ((GetProductionRow)(this.Rows[index]));
                }
            }
            
            public event GetProductionRowChangeEventHandler GetProductionRowChanging;
            
            public event GetProductionRowChangeEventHandler GetProductionRowChanged;
            
            public event GetProductionRowChangeEventHandler GetProductionRowDeleting;
            
            public event GetProductionRowChangeEventHandler GetProductionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetProductionRow(GetProductionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow AddGetProductionRow(string VillageName, int VillageId, int Warehouse, int Granary, int Wood, int Clay, int Iron, int Crop, int WoodPerHour, int ClayPerHour, int IronPerHour, int CropPerHour, string PlayerName) {
                GetProductionRow rowGetProductionRow = ((GetProductionRow)(this.NewRow()));
                rowGetProductionRow.ItemArray = new object[] {
                        null,
                        VillageName,
                        VillageId,
                        Warehouse,
                        Granary,
                        Wood,
                        Clay,
                        Iron,
                        Crop,
                        WoodPerHour,
                        ClayPerHour,
                        IronPerHour,
                        CropPerHour,
                        PlayerName};
                this.Rows.Add(rowGetProductionRow);
                return rowGetProductionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetProductionDataTable cln = ((GetProductionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetProductionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVillageName = base.Columns["VillageName"];
                this.columnVillageId = base.Columns["VillageId"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnGranary = base.Columns["Granary"];
                this.columnWood = base.Columns["Wood"];
                this.columnClay = base.Columns["Clay"];
                this.columnIron = base.Columns["Iron"];
                this.columnCrop = base.Columns["Crop"];
                this.columnWoodPerHour = base.Columns["WoodPerHour"];
                this.columnClayPerHour = base.Columns["ClayPerHour"];
                this.columnIronPerHour = base.Columns["IronPerHour"];
                this.columnCropPerHour = base.Columns["CropPerHour"];
                this.columnPlayerName = base.Columns["PlayerName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVillageName = new System.Data.DataColumn("VillageName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageName);
                this.columnVillageId = new System.Data.DataColumn("VillageId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVillageId);
                this.columnWarehouse = new System.Data.DataColumn("Warehouse", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnGranary = new System.Data.DataColumn("Granary", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranary);
                this.columnWood = new System.Data.DataColumn("Wood", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWood);
                this.columnClay = new System.Data.DataColumn("Clay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClay);
                this.columnIron = new System.Data.DataColumn("Iron", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIron);
                this.columnCrop = new System.Data.DataColumn("Crop", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrop);
                this.columnWoodPerHour = new System.Data.DataColumn("WoodPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWoodPerHour);
                this.columnClayPerHour = new System.Data.DataColumn("ClayPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClayPerHour);
                this.columnIronPerHour = new System.Data.DataColumn("IronPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIronPerHour);
                this.columnCropPerHour = new System.Data.DataColumn("CropPerHour", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropPerHour);
                this.columnPlayerName = new System.Data.DataColumn("PlayerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlayerName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnVillageName.ReadOnly = true;
                this.columnVillageName.MaxLength = 50;
                this.columnVillageId.ReadOnly = true;
                this.columnPlayerName.ReadOnly = true;
                this.columnPlayerName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow NewGetProductionRow() {
                return ((GetProductionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetProductionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetProductionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetProductionRowChanged != null)) {
                    this.GetProductionRowChanged(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetProductionRowChanging != null)) {
                    this.GetProductionRowChanging(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetProductionRowDeleted != null)) {
                    this.GetProductionRowDeleted(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetProductionRowDeleting != null)) {
                    this.GetProductionRowDeleting(this, new GetProductionRowChangeEvent(((GetProductionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetProductionRow(GetProductionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetProductionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAttackTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnAttackId;
            
            private System.Data.DataColumn columnAttackName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesDataTable() {
                this.TableName = "GetAttackTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAttackTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAttackTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AttackIdColumn {
                get {
                    return this.columnAttackId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AttackNameColumn {
                get {
                    return this.columnAttackName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesRow this[int index] {
                get {
                    return ((GetAttackTypesRow)(this.Rows[index]));
                }
            }
            
            public event GetAttackTypesRowChangeEventHandler GetAttackTypesRowChanging;
            
            public event GetAttackTypesRowChangeEventHandler GetAttackTypesRowChanged;
            
            public event GetAttackTypesRowChangeEventHandler GetAttackTypesRowDeleting;
            
            public event GetAttackTypesRowChangeEventHandler GetAttackTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAttackTypesRow(GetAttackTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesRow AddGetAttackTypesRow(int AttackId, string AttackName) {
                GetAttackTypesRow rowGetAttackTypesRow = ((GetAttackTypesRow)(this.NewRow()));
                rowGetAttackTypesRow.ItemArray = new object[] {
                        null,
                        AttackId,
                        AttackName};
                this.Rows.Add(rowGetAttackTypesRow);
                return rowGetAttackTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetAttackTypesDataTable cln = ((GetAttackTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetAttackTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAttackId = base.Columns["AttackId"];
                this.columnAttackName = base.Columns["AttackName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAttackId = new System.Data.DataColumn("AttackId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttackId);
                this.columnAttackName = new System.Data.DataColumn("AttackName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttackName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnAttackId.AllowDBNull = false;
                this.columnAttackName.AllowDBNull = false;
                this.columnAttackName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesRow NewGetAttackTypesRow() {
                return ((GetAttackTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetAttackTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetAttackTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAttackTypesRowChanged != null)) {
                    this.GetAttackTypesRowChanged(this, new GetAttackTypesRowChangeEvent(((GetAttackTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAttackTypesRowChanging != null)) {
                    this.GetAttackTypesRowChanging(this, new GetAttackTypesRowChangeEvent(((GetAttackTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAttackTypesRowDeleted != null)) {
                    this.GetAttackTypesRowDeleted(this, new GetAttackTypesRowChangeEvent(((GetAttackTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAttackTypesRowDeleting != null)) {
                    this.GetAttackTypesRowDeleting(this, new GetAttackTypesRowChangeEvent(((GetAttackTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAttackTypesRow(GetAttackTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAttackTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTroopTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTribeId;
            
            private System.Data.DataColumn columnTroopId;
            
            private System.Data.DataColumn columnTroopName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesDataTable() {
                this.TableName = "GetTroopTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTroopTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTroopTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TribeIdColumn {
                get {
                    return this.columnTribeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TroopIdColumn {
                get {
                    return this.columnTroopId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TroopNameColumn {
                get {
                    return this.columnTroopName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesRow this[int index] {
                get {
                    return ((GetTroopTypesRow)(this.Rows[index]));
                }
            }
            
            public event GetTroopTypesRowChangeEventHandler GetTroopTypesRowChanging;
            
            public event GetTroopTypesRowChangeEventHandler GetTroopTypesRowChanged;
            
            public event GetTroopTypesRowChangeEventHandler GetTroopTypesRowDeleting;
            
            public event GetTroopTypesRowChangeEventHandler GetTroopTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTroopTypesRow(GetTroopTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesRow AddGetTroopTypesRow(int TribeId, int TroopId, string TroopName) {
                GetTroopTypesRow rowGetTroopTypesRow = ((GetTroopTypesRow)(this.NewRow()));
                rowGetTroopTypesRow.ItemArray = new object[] {
                        null,
                        TribeId,
                        TroopId,
                        TroopName};
                this.Rows.Add(rowGetTroopTypesRow);
                return rowGetTroopTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetTroopTypesDataTable cln = ((GetTroopTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetTroopTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTribeId = base.Columns["TribeId"];
                this.columnTroopId = base.Columns["TroopId"];
                this.columnTroopName = base.Columns["TroopName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTribeId = new System.Data.DataColumn("TribeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTribeId);
                this.columnTroopId = new System.Data.DataColumn("TroopId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTroopId);
                this.columnTroopName = new System.Data.DataColumn("TroopName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTroopName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnTribeId.AllowDBNull = false;
                this.columnTroopId.AllowDBNull = false;
                this.columnTroopName.AllowDBNull = false;
                this.columnTroopName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesRow NewGetTroopTypesRow() {
                return ((GetTroopTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetTroopTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetTroopTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTroopTypesRowChanged != null)) {
                    this.GetTroopTypesRowChanged(this, new GetTroopTypesRowChangeEvent(((GetTroopTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTroopTypesRowChanging != null)) {
                    this.GetTroopTypesRowChanging(this, new GetTroopTypesRowChangeEvent(((GetTroopTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTroopTypesRowDeleted != null)) {
                    this.GetTroopTypesRowDeleted(this, new GetTroopTypesRowChangeEvent(((GetTroopTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTroopTypesRowDeleting != null)) {
                    this.GetTroopTypesRowDeleting(this, new GetTroopTypesRowChangeEvent(((GetTroopTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTroopTypesRow(GetTroopTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTroopTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetTribesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTribeId;
            
            private System.Data.DataColumn columnTribeName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesDataTable() {
                this.TableName = "GetTribes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTribesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetTribesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TribeIdColumn {
                get {
                    return this.columnTribeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TribeNameColumn {
                get {
                    return this.columnTribeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesRow this[int index] {
                get {
                    return ((GetTribesRow)(this.Rows[index]));
                }
            }
            
            public event GetTribesRowChangeEventHandler GetTribesRowChanging;
            
            public event GetTribesRowChangeEventHandler GetTribesRowChanged;
            
            public event GetTribesRowChangeEventHandler GetTribesRowDeleting;
            
            public event GetTribesRowChangeEventHandler GetTribesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetTribesRow(GetTribesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesRow AddGetTribesRow(int TribeId, string TribeName) {
                GetTribesRow rowGetTribesRow = ((GetTribesRow)(this.NewRow()));
                rowGetTribesRow.ItemArray = new object[] {
                        null,
                        TribeId,
                        TribeName};
                this.Rows.Add(rowGetTribesRow);
                return rowGetTribesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetTribesDataTable cln = ((GetTribesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetTribesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTribeId = base.Columns["TribeId"];
                this.columnTribeName = base.Columns["TribeName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTribeId = new System.Data.DataColumn("TribeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTribeId);
                this.columnTribeName = new System.Data.DataColumn("TribeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTribeName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnTribeId.AllowDBNull = false;
                this.columnTribeName.AllowDBNull = false;
                this.columnTribeName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesRow NewGetTribesRow() {
                return ((GetTribesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetTribesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetTribesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetTribesRowChanged != null)) {
                    this.GetTribesRowChanged(this, new GetTribesRowChangeEvent(((GetTribesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetTribesRowChanging != null)) {
                    this.GetTribesRowChanging(this, new GetTribesRowChangeEvent(((GetTribesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetTribesRowDeleted != null)) {
                    this.GetTribesRowDeleted(this, new GetTribesRowChangeEvent(((GetTribesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetTribesRowDeleting != null)) {
                    this.GetTribesRowDeleting(this, new GetTribesRowChangeEvent(((GetTribesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetTribesRow(GetTribesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                TravianBotDataSet ds = new TravianBotDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetTribesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetBuildIdsRow : System.Data.DataRow {
            
            private GetBuildIdsDataTable tableGetBuildIds;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetBuildIdsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetBuildIds = ((GetBuildIdsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetBuildIds.IDColumn]));
                }
                set {
                    this[this.tableGetBuildIds.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildId {
                get {
                    return ((int)(this[this.tableGetBuildIds.BuildIdColumn]));
                }
                set {
                    this[this.tableGetBuildIds.BuildIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildIdName {
                get {
                    return ((string)(this[this.tableGetBuildIds.BuildIdNameColumn]));
                }
                set {
                    this[this.tableGetBuildIds.BuildIdNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetPriorityRow : System.Data.DataRow {
            
            private GetPriorityDataTable tableGetPriority;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetPriorityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPriority = ((GetPriorityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetPriority.IDColumn]));
                }
                set {
                    this[this.tableGetPriority.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriorityLevel {
                get {
                    return ((int)(this[this.tableGetPriority.PriorityLevelColumn]));
                }
                set {
                    this[this.tableGetPriority.PriorityLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PriorityName {
                get {
                    return ((string)(this[this.tableGetPriority.PriorityNameColumn]));
                }
                set {
                    this[this.tableGetPriority.PriorityNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTaskListForGUIRow : System.Data.DataRow {
            
            private GetTaskListForGUIDataTable tableGetTaskListForGUI;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTaskListForGUIRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTaskListForGUI = ((GetTaskListForGUIDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaskName {
                get {
                    try {
                        return ((string)(this[this.tableGetTaskListForGUI.TaskNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaskName\' in table \'GetTaskListForGUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTaskListForGUI.TaskNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VillageName {
                get {
                    try {
                        return ((string)(this[this.tableGetTaskListForGUI.VillageNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VillageName\' in table \'GetTaskListForGUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTaskListForGUI.VillageNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildId {
                get {
                    return ((int)(this[this.tableGetTaskListForGUI.BuildIdColumn]));
                }
                set {
                    this[this.tableGetTaskListForGUI.BuildIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Priority {
                get {
                    try {
                        return ((string)(this[this.tableGetTaskListForGUI.PriorityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Priority\' in table \'GetTaskListForGUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetTaskListForGUI.PriorityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildLevel {
                get {
                    return ((int)(this[this.tableGetTaskListForGUI.BuildLevelColumn]));
                }
                set {
                    this[this.tableGetTaskListForGUI.BuildLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextCheck {
                get {
                    return ((System.DateTime)(this[this.tableGetTaskListForGUI.NextCheckColumn]));
                }
                set {
                    this[this.tableGetTaskListForGUI.NextCheckColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaskNameNull() {
                return this.IsNull(this.tableGetTaskListForGUI.TaskNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaskNameNull() {
                this[this.tableGetTaskListForGUI.TaskNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVillageNameNull() {
                return this.IsNull(this.tableGetTaskListForGUI.VillageNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVillageNameNull() {
                this[this.tableGetTaskListForGUI.VillageNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableGetTaskListForGUI.PriorityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableGetTaskListForGUI.PriorityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTasksRow : System.Data.DataRow {
            
            private GetTasksDataTable tableGetTasks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTasksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTasks = ((GetTasksDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetTasks.IDColumn]));
                }
                set {
                    this[this.tableGetTasks.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaskId {
                get {
                    return ((int)(this[this.tableGetTasks.TaskIdColumn]));
                }
                set {
                    this[this.tableGetTasks.TaskIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaskName {
                get {
                    return ((string)(this[this.tableGetTasks.TaskNameColumn]));
                }
                set {
                    this[this.tableGetTasks.TaskNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetVillagesRow : System.Data.DataRow {
            
            private GetVillagesDataTable tableGetVillages;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetVillagesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetVillages = ((GetVillagesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetVillages.IDColumn]));
                }
                set {
                    this[this.tableGetVillages.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    return ((int)(this[this.tableGetVillages.VillageIdColumn]));
                }
                set {
                    this[this.tableGetVillages.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VillageName {
                get {
                    return ((string)(this[this.tableGetVillages.VillageNameColumn]));
                }
                set {
                    this[this.tableGetVillages.VillageNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlayerId {
                get {
                    return ((int)(this[this.tableGetVillages.PlayerIdColumn]));
                }
                set {
                    this[this.tableGetVillages.PlayerIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetProductionRow : System.Data.DataRow {
            
            private GetProductionDataTable tableGetProduction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetProductionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetProduction = ((GetProductionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetProduction.IDColumn]));
                }
                set {
                    this[this.tableGetProduction.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VillageName {
                get {
                    try {
                        return ((string)(this[this.tableGetProduction.VillageNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VillageName\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.VillageNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VillageId {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.VillageIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VillageId\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.VillageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Warehouse {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WarehouseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Warehouse\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WarehouseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Granary {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.GranaryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Granary\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.GranaryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Wood {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WoodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Wood\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WoodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Clay {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.ClayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Clay\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.ClayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Iron {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.IronColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Iron\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.IronColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Crop {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.CropColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Crop\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.CropColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WoodPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.WoodPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WoodPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.WoodPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClayPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.ClayPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ClayPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.ClayPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IronPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.IronPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IronPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.IronPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropPerHour {
                get {
                    try {
                        return ((int)(this[this.tableGetProduction.CropPerHourColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CropPerHour\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.CropPerHourColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlayerName {
                get {
                    try {
                        return ((string)(this[this.tableGetProduction.PlayerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PlayerName\' in table \'GetProduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetProduction.PlayerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVillageNameNull() {
                return this.IsNull(this.tableGetProduction.VillageNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVillageNameNull() {
                this[this.tableGetProduction.VillageNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVillageIdNull() {
                return this.IsNull(this.tableGetProduction.VillageIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVillageIdNull() {
                this[this.tableGetProduction.VillageIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableGetProduction.WarehouseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableGetProduction.WarehouseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranaryNull() {
                return this.IsNull(this.tableGetProduction.GranaryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranaryNull() {
                this[this.tableGetProduction.GranaryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodNull() {
                return this.IsNull(this.tableGetProduction.WoodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodNull() {
                this[this.tableGetProduction.WoodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayNull() {
                return this.IsNull(this.tableGetProduction.ClayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayNull() {
                this[this.tableGetProduction.ClayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronNull() {
                return this.IsNull(this.tableGetProduction.IronColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronNull() {
                this[this.tableGetProduction.IronColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropNull() {
                return this.IsNull(this.tableGetProduction.CropColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropNull() {
                this[this.tableGetProduction.CropColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWoodPerHourNull() {
                return this.IsNull(this.tableGetProduction.WoodPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWoodPerHourNull() {
                this[this.tableGetProduction.WoodPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClayPerHourNull() {
                return this.IsNull(this.tableGetProduction.ClayPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClayPerHourNull() {
                this[this.tableGetProduction.ClayPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIronPerHourNull() {
                return this.IsNull(this.tableGetProduction.IronPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIronPerHourNull() {
                this[this.tableGetProduction.IronPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropPerHourNull() {
                return this.IsNull(this.tableGetProduction.CropPerHourColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropPerHourNull() {
                this[this.tableGetProduction.CropPerHourColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlayerNameNull() {
                return this.IsNull(this.tableGetProduction.PlayerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlayerNameNull() {
                this[this.tableGetProduction.PlayerNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAttackTypesRow : System.Data.DataRow {
            
            private GetAttackTypesDataTable tableGetAttackTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAttackTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAttackTypes = ((GetAttackTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetAttackTypes.IDColumn]));
                }
                set {
                    this[this.tableGetAttackTypes.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AttackId {
                get {
                    return ((int)(this[this.tableGetAttackTypes.AttackIdColumn]));
                }
                set {
                    this[this.tableGetAttackTypes.AttackIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttackName {
                get {
                    return ((string)(this[this.tableGetAttackTypes.AttackNameColumn]));
                }
                set {
                    this[this.tableGetAttackTypes.AttackNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTroopTypesRow : System.Data.DataRow {
            
            private GetTroopTypesDataTable tableGetTroopTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTroopTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTroopTypes = ((GetTroopTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetTroopTypes.IDColumn]));
                }
                set {
                    this[this.tableGetTroopTypes.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TribeId {
                get {
                    return ((int)(this[this.tableGetTroopTypes.TribeIdColumn]));
                }
                set {
                    this[this.tableGetTroopTypes.TribeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TroopId {
                get {
                    return ((int)(this[this.tableGetTroopTypes.TroopIdColumn]));
                }
                set {
                    this[this.tableGetTroopTypes.TroopIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TroopName {
                get {
                    return ((string)(this[this.tableGetTroopTypes.TroopNameColumn]));
                }
                set {
                    this[this.tableGetTroopTypes.TroopNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetTribesRow : System.Data.DataRow {
            
            private GetTribesDataTable tableGetTribes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetTribesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetTribes = ((GetTribesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGetTribes.IDColumn]));
                }
                set {
                    this[this.tableGetTribes.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TribeId {
                get {
                    return ((int)(this[this.tableGetTribes.TribeIdColumn]));
                }
                set {
                    this[this.tableGetTribes.TribeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TribeName {
                get {
                    return ((string)(this[this.tableGetTribes.TribeNameColumn]));
                }
                set {
                    this[this.tableGetTribes.TribeNameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetBuildIdsRowChangeEvent : System.EventArgs {
            
            private GetBuildIdsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsRowChangeEvent(GetBuildIdsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetBuildIdsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetPriorityRowChangeEvent : System.EventArgs {
            
            private GetPriorityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityRowChangeEvent(GetPriorityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetPriorityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTaskListForGUIRowChangeEvent : System.EventArgs {
            
            private GetTaskListForGUIRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIRowChangeEvent(GetTaskListForGUIRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTaskListForGUIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTasksRowChangeEvent : System.EventArgs {
            
            private GetTasksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksRowChangeEvent(GetTasksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTasksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetVillagesRowChangeEvent : System.EventArgs {
            
            private GetVillagesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesRowChangeEvent(GetVillagesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetVillagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetProductionRowChangeEvent : System.EventArgs {
            
            private GetProductionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRowChangeEvent(GetProductionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetProductionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAttackTypesRowChangeEvent : System.EventArgs {
            
            private GetAttackTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesRowChangeEvent(GetAttackTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAttackTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTroopTypesRowChangeEvent : System.EventArgs {
            
            private GetTroopTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesRowChangeEvent(GetTroopTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTroopTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetTribesRowChangeEvent : System.EventArgs {
            
            private GetTribesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesRowChangeEvent(GetTribesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetTribesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GUI.TravianBotDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetBuildIdsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetBuildIdsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetBuildIds";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("BuildId", "BuildId");
            tableMapping.ColumnMappings.Add("BuildIdName", "BuildIdName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetBuildIds";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetBuildIdsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetBuildIdsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetBuildIdsDataTable dataTable = new TravianBotDataSet.GetBuildIdsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPriorityTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetPriorityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPriority";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("PriorityLevel", "PriorityLevel");
            tableMapping.ColumnMappings.Add("PriorityName", "PriorityName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPriority";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetPriorityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetPriorityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetPriorityDataTable dataTable = new TravianBotDataSet.GetPriorityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetTaskListForGUITableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetTaskListForGUITableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetTaskListForGUI";
            tableMapping.ColumnMappings.Add("TaskName", "TaskName");
            tableMapping.ColumnMappings.Add("VillageName", "VillageName");
            tableMapping.ColumnMappings.Add("BuildId", "BuildId");
            tableMapping.ColumnMappings.Add("Priority", "Priority");
            tableMapping.ColumnMappings.Add("BuildLevel", "BuildLevel");
            tableMapping.ColumnMappings.Add("NextCheck", "NextCheck");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetTaskListForGUI";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetTaskListForGUIDataTable dataTable, System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetTaskListForGUIDataTable GetData(System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            TravianBotDataSet.GetTaskListForGUIDataTable dataTable = new TravianBotDataSet.GetTaskListForGUIDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetTasksTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetTasksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetTasks";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TaskId", "TaskId");
            tableMapping.ColumnMappings.Add("TaskName", "TaskName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetTasks";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetTasksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetTasksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetTasksDataTable dataTable = new TravianBotDataSet.GetTasksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetVillagesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetVillagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetVillages";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("VillageName", "VillageName");
            tableMapping.ColumnMappings.Add("PlayerId", "PlayerId");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetVillages";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetVillagesDataTable dataTable, System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetVillagesDataTable GetData(System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            TravianBotDataSet.GetVillagesDataTable dataTable = new TravianBotDataSet.GetVillagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetProductionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetProductionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetProduction";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VillageName", "VillageName");
            tableMapping.ColumnMappings.Add("VillageId", "VillageId");
            tableMapping.ColumnMappings.Add("Warehouse", "Warehouse");
            tableMapping.ColumnMappings.Add("Granary", "Granary");
            tableMapping.ColumnMappings.Add("Wood", "Wood");
            tableMapping.ColumnMappings.Add("Clay", "Clay");
            tableMapping.ColumnMappings.Add("Iron", "Iron");
            tableMapping.ColumnMappings.Add("Crop", "Crop");
            tableMapping.ColumnMappings.Add("WoodPerHour", "WoodPerHour");
            tableMapping.ColumnMappings.Add("ClayPerHour", "ClayPerHour");
            tableMapping.ColumnMappings.Add("IronPerHour", "IronPerHour");
            tableMapping.ColumnMappings.Add("CropPerHour", "CropPerHour");
            tableMapping.ColumnMappings.Add("PlayerName", "PlayerName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetProduction";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetProductionDataTable dataTable, System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetProductionDataTable GetData(System.Nullable<int> PlayerId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PlayerId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(PlayerId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            TravianBotDataSet.GetProductionDataTable dataTable = new TravianBotDataSet.GetProductionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetAttackTypesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetAttackTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetAttackTypes";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("AttackId", "AttackId");
            tableMapping.ColumnMappings.Add("AttackName", "AttackName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetAttackTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetAttackTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetAttackTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetAttackTypesDataTable dataTable = new TravianBotDataSet.GetAttackTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetTroopTypesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetTroopTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetTroopTypes";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TribeId", "TribeId");
            tableMapping.ColumnMappings.Add("TroopId", "TroopId");
            tableMapping.ColumnMappings.Add("TroopName", "TroopName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetTroopTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetTroopTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetTroopTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetTroopTypesDataTable dataTable = new TravianBotDataSet.GetTroopTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetTribesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetTribesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetTribes";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TribeId", "TribeId");
            tableMapping.ColumnMappings.Add("TribeName", "TribeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GUI.Properties.Settings.Default.TravianBotConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetTribes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(TravianBotDataSet.GetTribesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual TravianBotDataSet.GetTribesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            TravianBotDataSet.GetTribesDataTable dataTable = new TravianBotDataSet.GetTribesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.IDbCommand[] _commandCollection;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.IDbCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new System.Data.SqlClient.SqlConnection(global::GUI.Properties.Settings.Default.TravianBotConnectionString);
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.InsertNewTask";
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@TaskId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@VillageId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriorityId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@BuildLevel", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@NextCheck", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Enabled", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlayerId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InsertNewTask(System.Nullable<int> TaskId, System.Nullable<int> VillageId, System.Nullable<int> BuildId, System.Nullable<int> PriorityId, System.Nullable<int> BuildLevel, System.Nullable<System.DateTime> NextCheck, System.Nullable<int> Enabled, System.Nullable<int> PlayerId) {
            System.Data.SqlClient.SqlCommand command = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((TaskId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(TaskId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((VillageId.HasValue == true)) {
                command.Parameters[2].Value = ((int)(VillageId.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((BuildId.HasValue == true)) {
                command.Parameters[3].Value = ((int)(BuildId.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((PriorityId.HasValue == true)) {
                command.Parameters[4].Value = ((int)(PriorityId.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            if ((BuildLevel.HasValue == true)) {
                command.Parameters[5].Value = ((int)(BuildLevel.Value));
            }
            else {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            if ((NextCheck.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(NextCheck.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Enabled.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Enabled.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PlayerId.HasValue == true)) {
                command.Parameters[8].Value = ((int)(PlayerId.Value));
            }
            else {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591